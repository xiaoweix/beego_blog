/*
SQLyog Ultimate v10.00 Beta1
MySQL - 5.7.17-log : Database - beego_blog
*********************************************************************
*/


/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
-- CREATE DATABASE /*!32312 IF NOT EXISTS*/`beego_blog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `beego_blog`;

/*Table structure for table `tb_link` */

DROP TABLE IF EXISTS `tb_link`;

CREATE TABLE `tb_link` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `sitename` varchar(80) NOT NULL DEFAULT '' COMMENT '网站名字',
  `url` varchar(200) NOT NULL DEFAULT '' COMMENT '友链URL地址',
  `rank` tinyint(4) NOT NULL DEFAULT '0' COMMENT '排序值',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Data for the table `tb_link` */

insert  into `tb_link`(`id`,`sitename`,`url`,`rank`) values (3,'百度','http://www.baidu.com',5),(4,'搜狗','http://www.sogou.com/',4),(5,'360','http://www.so.com/',1),(6,'兄弟连官网','http://www.itxdl.cn/',1);

/*Table structure for table `tb_mood` */

DROP TABLE IF EXISTS `tb_mood`;

CREATE TABLE `tb_mood` (
  `id` mediumint(8) NOT NULL AUTO_INCREMENT,
  `content` text CHARACTER SET utf8 NOT NULL,
  `cover` varchar(70) CHARACTER SET utf8 NOT NULL DEFAULT '/static/upload/defaultcover.png' COMMENT '说说图片',
  `posttime` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '发布时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=latin1;

/*Data for the table `tb_mood` */

insert  into `tb_mood`(`id`,`content`,`cover`,`posttime`) values (15,'<p><span style=\"font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; line-height: inherit; margin: 0px 10px 0px auto; padding: 0px; vertical-align: baseline; color: rgb(85, 85, 85); text-indent: 28px;\">2006年11月</span><span style=\"color: rgb(85, 85, 85); font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">&nbsp;策划、筹建兄弟连</span></p>','/static/upload/blog5.jpg','2018-08-26 02:31:22'),(16,'<p><span style=\"font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; line-height: inherit; margin: 0px 10px 0px auto; padding: 0px; vertical-align: baseline; color: rgb(85, 85, 85); text-indent: 28px;\">2007年03月&nbsp;</span><span style=\"color: rgb(85, 85, 85); font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">北京易第优教育咨询有限公司（兄弟连）注册成立</span></p>','/static/upload/blog5.jpg','2018-08-26 02:31:38'),(17,'<p><span style=\"font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; line-height: inherit; margin: 0px 10px 0px auto; padding: 0px; vertical-align: baseline; color: rgb(85, 85, 85); text-indent: 28px;\">2007年04月&nbsp;</span><span style=\"color: rgb(85, 85, 85); font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">兄弟连第一期PHP周末班开课</span></p>','/static/upload/blog4.jpg','2018-08-26 02:31:51'),(18,'<p><span style=\"font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; line-height: inherit; margin: 0px 10px 0px auto; padding: 0px; vertical-align: baseline; color: rgb(85, 85, 85); text-indent: 28px;\">2007年10月&nbsp;</span><span style=\"color: rgb(85, 85, 85); font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">兄弟连第一期PHP就业班开课</span></p>','/static/upload/blog7.jpg','2018-08-26 02:32:05'),(19,'<p><span style=\"font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; line-height: inherit; margin: 0px 10px 0px auto; padding: 0px; vertical-align: baseline; color: rgb(85, 85, 85); text-indent: 28px;\">2007年12月&nbsp;</span><span style=\"color: rgb(85, 85, 85); font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">兄弟连荣获“大学生心目中最具影响力的职业培训机构”殊荣</span></p>','/static/upload/blog4.jpg','2018-08-26 02:32:15'),(20,'<p><span style=\"font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; line-height: inherit; margin: 0px 10px 0px auto; padding: 0px; vertical-align: baseline; color: rgb(85, 85, 85); text-indent: 28px;\">2008年10月&nbsp;</span><span style=\"color: rgb(85, 85, 85); font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">发布兄弟连文化“无兄弟 不编程”</span></p>','/static/upload/blog8.jpg','2018-08-26 02:32:27'),(21,'<p><span style=\"font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; line-height: inherit; margin: 0px 10px 0px auto; padding: 0px; vertical-align: baseline; color: rgb(85, 85, 85); text-indent: 28px;\">2009年10月&nbsp;</span><span style=\"color: rgb(85, 85, 85); font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">兄弟连教材《细说PHP》出版</span></p>','/static/upload/blog9.jpg','2018-08-26 02:32:41'),(22,'<p><span style=\"font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; line-height: inherit; margin: 0px 10px 0px auto; padding: 0px; vertical-align: baseline; color: rgb(85, 85, 85); text-indent: 28px;\">2010年04月&nbsp;</span><span style=\"color: rgb(85, 85, 85); font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">兄弟连总部迁址中关村软件园</span></p>','/static/upload/blog0.jpg','2018-08-26 02:32:54'),(23,'<p><span style=\"font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; line-height: inherit; margin: 0px 10px 0px auto; padding: 0px; vertical-align: baseline; color: rgb(85, 85, 85); text-indent: 28px;\">2010年10月&nbsp;</span><span style=\"color: rgb(85, 85, 85); font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">兄弟连引入职业化管理模式：学员就是职员，提升就业竞争力</span></p>','/static/upload/blog6.jpg','2018-08-26 02:33:48'),(24,'<p><span style=\"font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; line-height: inherit; margin: 0px 10px 0px auto; padding: 0px; vertical-align: baseline; color: rgb(85, 85, 85); text-indent: 28px;\">2010年11月&nbsp;</span><span style=\"color: rgb(85, 85, 85); font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">兄弟连国内首推“零学费学习”模式</span></p>','/static/upload/blog9.jpg','2018-08-26 02:33:58'),(25,'<p><span style=\"font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; line-height: inherit; margin: 0px 10px 0px auto; padding: 0px; vertical-align: baseline; color: rgb(85, 85, 85); text-indent: 28px;\">2011年03月&nbsp;</span><span style=\"color: rgb(85, 85, 85); font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">兄弟连发布PHP学习视频突破500个</span></p>','/static/upload/blog10.jpg','2018-08-26 02:34:09'),(26,'<p><span style=\"font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; line-height: inherit; margin: 0px 10px 0px auto; padding: 0px; vertical-align: baseline; color: rgb(85, 85, 85); text-indent: 28px;\">2011年11月&nbsp;</span><span style=\"color: rgb(85, 85, 85); font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">兄弟连总部迁址育荣国际教育园区，占地一万多平米</span></p>','/static/upload/blog2.jpg','2018-08-26 02:34:21'),(27,'<p><span style=\"font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; line-height: inherit; margin: 0px 10px 0px auto; padding: 0px; vertical-align: baseline; color: rgb(85, 85, 85); text-indent: 28px;\">2012年01月&nbsp;</span><span style=\"color: rgb(85, 85, 85); font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">《细说PHP》第七次印刷，销售量突破两万册，国内同类书籍销量第一</span></p>','/static/upload/blog3.jpg','2018-08-26 02:34:33'),(28,'<p><span style=\"font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; line-height: inherit; margin: 0px 10px 0px auto; padding: 0px; vertical-align: baseline; color: rgb(85, 85, 85); text-indent: 28px;\">2012年03月&nbsp;</span><span style=\"color: rgb(85, 85, 85); font-family: tahoma, arial, 微软雅黑, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">发布兄弟连核心价值“优秀的教学、严格的管理、职业素质课贯穿”</span></p>','/static/upload/blog1.jpg','2018-08-26 02:34:44');

/*Table structure for table `tb_post` */

DROP TABLE IF EXISTS `tb_post`;

CREATE TABLE `tb_post` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `userid` mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT '用户id',
  `author` varchar(15) NOT NULL DEFAULT '' COMMENT '作者',
  `title` varchar(100) NOT NULL DEFAULT '' COMMENT '标题',
  `color` varchar(7) NOT NULL DEFAULT '' COMMENT '标题颜色',
  `content` mediumtext NOT NULL COMMENT '内容',
  `tags` varchar(100) NOT NULL DEFAULT '' COMMENT '标签',
  `views` mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT '查看次数',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态{0:正常,1:草稿,2:回收站}',
  `posttime` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '发布时间',
  `updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `istop` tinyint(3) NOT NULL DEFAULT '0' COMMENT '是否置顶',
  `cover` varchar(70) DEFAULT '/static/upload/defaultcover.png' COMMENT '文章封面',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=47 DEFAULT CHARSET=utf8;

/*Data for the table `tb_post` */

insert  into `tb_post`(`id`,`userid`,`author`,`title`,`color`,`content`,`tags`,`views`,`status`,`posttime`,`updated`,`istop`,`cover`) values (11,7,'admin','go语言数据类型','','<p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">在 Go 编程语言中，数据类型用于声明函数和变量。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">数据类型的出现是为了把数据分成所需内存大小不同的数据，编程的时候需要用大数据的时候才需要申请大内存，就可以充分利用内存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">Go 语言按类别有以下几种数据类型：</p><table class=\"reference\" width=\"834\" style=\"width: 769px;\"><tbody style=\"border: 0px; margin: 0px; padding: 0px;\"><tr style=\"border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);\" class=\"firstRow\"><th style=\"border-color: rgb(85, 85, 85); margin: 0px; padding: 3px; color: rgb(255, 255, 255); background-color: rgb(85, 85, 85); vertical-align: top; text-align: left;\">序号</th><th style=\"border-color: rgb(85, 85, 85); margin: 0px; padding: 3px; color: rgb(255, 255, 255); background-color: rgb(85, 85, 85); vertical-align: top; text-align: left;\">类型和描述</th></tr><tr style=\"border: 0px; margin: 0px; padding: 0px;\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">1</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>布尔型</strong><br/>布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">2</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>数字类型</strong><br/>整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且原生支持复数，其中位的运算采用补码。</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px;\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">3</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>字符串类型:</strong><br/>字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。Go语言的字符串的字节使用UTF-8编码标识Unicode文本。</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">4</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>派生类型:</strong><br/>包括：<ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>(a) 指针类型（Pointer）</p></li><li><p>(b) 数组类型</p></li><li><p>(c) 结构化类型(struct)</p></li><li><p>(d) Channel 类型</p></li><li><p>(e) 函数类型</p></li><li><p>(f) 切片类型</p></li><li><p>(g) 接口类型（interface）</p></li><li><p>(h) Map 类型</p></li></ul></td></tr></tbody></table><hr style=\"background-color: rgb(212, 212, 212); color: rgb(212, 212, 212); height: 1px; border: 0px; clear: both; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 12px; white-space: normal;\"/><h2 style=\"border: 0px; margin: 2px 0px; padding: 0px; font-size: 1.8em; line-height: 1.8em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">数字类型</h2><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">Go 也有基于架构的类型，例如：int、uint 和 uintptr。</p><table class=\"reference\" width=\"834\" style=\"width: 769px;\"><tbody style=\"border: 0px; margin: 0px; padding: 0px;\"><tr style=\"border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);\" class=\"firstRow\"><th style=\"border-color: rgb(85, 85, 85); margin: 0px; padding: 3px; color: rgb(255, 255, 255); background-color: rgb(85, 85, 85); vertical-align: top; text-align: left;\">序号</th><th style=\"border-color: rgb(85, 85, 85); margin: 0px; padding: 3px; color: rgb(255, 255, 255); background-color: rgb(85, 85, 85); vertical-align: top; text-align: left;\">类型和描述</th></tr><tr style=\"border: 0px; margin: 0px; padding: 0px;\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">1</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>uint8</strong><br/>无符号 8 位整型 (0 到 255)</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">2</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>uint16</strong><br/>无符号 16 位整型 (0 到 65535)</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px;\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">3</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>uint32</strong><br/>无符号 32 位整型 (0 到 4294967295)</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">4</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>uint64</strong><br/>无符号 64 位整型 (0 到 18446744073709551615)</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px;\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">5</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>int8</strong><br/>有符号 8 位整型 (-128 到 127)</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">6</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>int16</strong><br/>有符号 16 位整型 (-32768 到 32767)</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px;\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">7</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>int32</strong><br/>有符号 32 位整型 (-2147483648 到 2147483647)</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">8</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>int64</strong><br/>有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">浮点型：</p><table class=\"reference\" width=\"834\" style=\"width: 769px;\"><tbody style=\"border: 0px; margin: 0px; padding: 0px;\"><tr style=\"border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);\" class=\"firstRow\"><th style=\"border-color: rgb(85, 85, 85); margin: 0px; padding: 3px; color: rgb(255, 255, 255); background-color: rgb(85, 85, 85); vertical-align: top; text-align: left;\">序号</th><th style=\"border-color: rgb(85, 85, 85); margin: 0px; padding: 3px; color: rgb(255, 255, 255); background-color: rgb(85, 85, 85); vertical-align: top; text-align: left;\">类型和描述</th></tr><tr style=\"border: 0px; margin: 0px; padding: 0px;\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">1</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>float32</strong><br/>IEEE-754 32位浮点型数</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">2</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>float64</strong><br/>IEEE-754 64位浮点型数</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px;\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">3</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>complex64</strong><br/>32 位实数和虚数</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">4</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>complex128</strong><br/>64 位实数和虚数</td></tr></tbody></table><hr style=\"background-color: rgb(212, 212, 212); color: rgb(212, 212, 212); height: 1px; border: 0px; clear: both; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 12px; white-space: normal;\"/><h2 style=\"border: 0px; margin: 2px 0px; padding: 0px; font-size: 1.8em; line-height: 1.8em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">其他数字类型</h2><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">以下列出了其他更多的数字类型：</p><table class=\"reference\" width=\"834\" style=\"width: 769px;\"><tbody style=\"border: 0px; margin: 0px; padding: 0px;\"><tr style=\"border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);\" class=\"firstRow\"><th style=\"border-color: rgb(85, 85, 85); margin: 0px; padding: 3px; color: rgb(255, 255, 255); background-color: rgb(85, 85, 85); vertical-align: top; text-align: left;\">序号</th><th style=\"border-color: rgb(85, 85, 85); margin: 0px; padding: 3px; color: rgb(255, 255, 255); background-color: rgb(85, 85, 85); vertical-align: top; text-align: left;\">类型和描述</th></tr><tr style=\"border: 0px; margin: 0px; padding: 0px;\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">1</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>byte</strong><br/>类似 uint8</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">2</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>rune</strong><br/>类似 int32</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px;\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">3</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>uint</strong><br/>32 或 64 位</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">4</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>int</strong><br/>与 uint 一样大小</td></tr><tr style=\"border: 0px; margin: 0px; padding: 0px;\"><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; min-width: 24px; line-height: 2em; vertical-align: top;\">5</td><td style=\"border-color: rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 13px; line-height: 2em; min-width: 24px; vertical-align: top;\"><strong>uintptr</strong><br/>无符号整型，用于存放一个指针</td></tr></tbody></table><p><br/></p>',',数组,',0,2,'2018-08-16 04:22:49','2018-08-16 04:23:35',0,'/static/upload/blog3.jpg'),(12,7,'admin','Python数据类型','','<p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">在 Python 中，变量就是变量，它没有类型，我们所说的&quot;类型&quot;是变量所指的内存中对象的类型。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">等号（=）用来给变量赋值。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：</p><h2 class=\"example\" style=\"border: 0px; margin: 0px 0px 2px; padding: 0px; font-size: 14.4px; line-height: 1.8em; color: rgb(97, 127, 16); background-color: transparent;\">实例(Python 3.0+)</h2><p><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\">#!/usr/bin/python3</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">\r\n </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">counter</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">100</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"># 整型变量</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"></span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">miles</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> &nbsp; = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">1000.0</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> &nbsp; &nbsp; &nbsp; </span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"># 浮点型变量</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"></span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">name</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> &nbsp; &nbsp;= </span><span class=\"hl-quotes\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(139, 0, 0);\">&quot;</span><span class=\"hl-string\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 17, 17);\">runoob</span><span class=\"hl-quotes\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(139, 0, 0);\">&quot;</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> &nbsp; &nbsp; </span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"># 字符串</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">\r\n </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">print</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">(</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">counter</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">)</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"></span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">print</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">(</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">miles</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">)</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"></span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">print</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">(</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">name</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">)</span></p><p><br/><a target=\"_blank\" href=\"http://www.runoob.com/try/runcode.php?filename=basic_data_type1&type=python3\" class=\"showbtn\" style=\"border: 1px solid rgb(170, 170, 170); margin: 0px 0px 5px 5px; padding: 3px 10px 4px; color: rgb(255, 255, 255); text-decoration-line: none; transition-duration: 0.2s; transition-property: opacity; display: inline-block; background-color: rgb(138, 192, 7); font-weight: 700; text-align: center; border-radius: 5px; white-space: nowrap;\">运行实例 »</a></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">执行以上程序会输出如下结果：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">1001000.0runoob</pre><h3 style=\"border: 0px; margin: 8px 0px; padding: 0px; font-size: 1.4em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">多个变量赋值</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">Python允许你同时为多个变量赋值。例如：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">a&nbsp;=&nbsp;b&nbsp;=&nbsp;c&nbsp;=&nbsp;1</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量都指向同一个内存地址。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">您也可以为多个对象指定多个变量。例如：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">a,&nbsp;b,&nbsp;c&nbsp;=&nbsp;1,&nbsp;2,&nbsp;&quot;runoob&quot;</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">以上实例，两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 &quot;runoob&quot; 分配给变量 c。</p><hr style=\"background-color: rgb(212, 212, 212); color: rgb(212, 212, 212); height: 1px; border: 0px; clear: both; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 12px; white-space: normal;\"/><h2 style=\"border: 0px; margin: 2px 0px; padding: 0px; font-size: 1.8em; line-height: 1.8em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">标准数据类型</h2><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">Python3 中有六个标准的数据类型：</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>Number（数字）</p></li><li><p>String（字符串）</p></li><li><p>List（列表）</p></li><li><p>Tuple（元组）</p></li><li><p>Set（集合）</p></li><li><p>Dictionary（字典）</p></li></ul><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">Python3 的六个标准数据类型中：</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p><strong style=\"border: 0px; margin: 0px; padding: 0px;\">不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</p></li><li><p><strong style=\"border: 0px; margin: 0px; padding: 0px;\">可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</p></li></ul><hr style=\"background-color: rgb(212, 212, 212); color: rgb(212, 212, 212); height: 1px; border: 0px; clear: both; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 12px; white-space: normal;\"/><h2 style=\"border: 0px; margin: 2px 0px; padding: 0px; font-size: 1.8em; line-height: 1.8em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">Number（数字）</h2><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">Python3 支持&nbsp;<strong>int、float、bool、complex（复数）</strong>。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">像大多数语言一样，数值类型的赋值和计算都是很直观的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">内置的 type() 函数可以用来查询变量所指的对象类型。</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">&gt;&gt;&gt;&nbsp;a,&nbsp;b,&nbsp;c,&nbsp;d&nbsp;=&nbsp;20,&nbsp;5.5,&nbsp;True,&nbsp;4+3j&gt;&gt;&gt;&nbsp;print(type(a),&nbsp;type(b),&nbsp;type(c),&nbsp;type(d))&lt;class&nbsp;&#39;int&#39;&gt;&nbsp;&lt;class&nbsp;&#39;float&#39;&gt;&nbsp;&lt;class&nbsp;&#39;bool&#39;&gt;&nbsp;&lt;class&nbsp;&#39;complex&#39;&gt;</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">此外还可以用 isinstance 来判断：</p><h2 class=\"example\" style=\"border: 0px; margin: 0px 0px 2px; padding: 0px; font-size: 14.4px; line-height: 1.8em; color: rgb(97, 127, 16); background-color: transparent;\">实例</h2><p><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">&gt;&gt;&gt;</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">a</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">111</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">&gt;&gt;&gt; </span><span class=\"hl-builtin\" style=\"border: 0px; margin: 0px; padding: 0px; color: teal;\">isinstance</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">(</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">a</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">, </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">int</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">)</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"></span><span class=\"hl-reserved\" style=\"border: 0px; margin: 0px; padding: 0px; color: green;\">True</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">&gt;&gt;&gt;</span></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">isinstance 和 type 的区别在于：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">class&nbsp;A:\r\n&nbsp;&nbsp;&nbsp;&nbsp;passclass&nbsp;B(A):\r\n&nbsp;&nbsp;&nbsp;&nbsp;passisinstance(A(),&nbsp;A)&nbsp;&nbsp;#&nbsp;returns&nbsp;Truetype(A())&nbsp;==&nbsp;A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;returns&nbsp;Trueisinstance(B(),&nbsp;A)&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;returns&nbsp;Truetype(B())&nbsp;==&nbsp;A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;returns&nbsp;False</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">区别就是:</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>type()不会认为子类是一种父类类型。</p></li><li><p>isinstance()会认为子类是一种父类类型。</p></li></ul><blockquote style=\"border: 0px; margin: 10px; padding: 10px; background-color: rgb(243, 247, 240); font-size: 13px; line-height: 2em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; white-space: normal;\"><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 4px; overflow-wrap: break-word; word-break: break-all; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; font-style: italic;\"><strong>注意：</strong>在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。</p></blockquote><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">当你指定一个值时，Number 对象就会被创建：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">var1&nbsp;=&nbsp;1var2&nbsp;=&nbsp;10</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">您也可以使用del语句删除一些对象引用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">del语句的语法是：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">del&nbsp;var1[,var2[,var3[....,varN]]]]</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">您可以通过使用del语句删除单个或多个对象。例如：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">del&nbsp;vardel&nbsp;var_a,&nbsp;var_b</pre><h3 style=\"border: 0px; margin: 8px 0px; padding: 0px; font-size: 1.4em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">数值运算</h3><h2 class=\"example\" style=\"border: 0px; margin: 0px 0px 2px; padding: 0px; font-size: 14.4px; line-height: 1.8em; color: rgb(97, 127, 16); background-color: transparent;\">实例</h2><p><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">&gt;&gt;&gt;</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">5</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> + </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">4</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> &nbsp;</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"># 加法</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"></span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">9</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">&gt;&gt;&gt; </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">4.3</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> - </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">2</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"># 减法</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"></span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">2.3</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">&gt;&gt;&gt; </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">3</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> * </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">7</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> &nbsp;</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"># 乘法</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"></span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">21</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">&gt;&gt;&gt; </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">2</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> / </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">4</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> &nbsp;</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"># 除法，得到一个浮点数</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"></span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">0.5</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">&gt;&gt;&gt; </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">2</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> // </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">4</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"># 除法，得到一个整数</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"></span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">0</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">&gt;&gt;&gt; </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">17</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> % </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">3</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"># 取余 </span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"></span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">2</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">&gt;&gt;&gt; </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">2</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> ** </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">5</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"># 乘方</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"></span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">32</span></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\"><strong>注意：</strong></p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>1、Python可以同时为多个变量赋值，如a, b = 1, 2。</p></li><li><p>2、一个变量可以通过赋值指向不同类型的对象。</p></li><li><p>3、数值的除法包含两个运算符：<span class=\"marked\" style=\"border: 0px; margin: 0px; padding: 0.2em; background-color: rgb(236, 234, 230); border-radius: 3px; font-weight: bold; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;\">/</span>&nbsp;返回一个浮点数，<span class=\"marked\" style=\"border: 0px; margin: 0px; padding: 0.2em; background-color: rgb(236, 234, 230); border-radius: 3px; font-weight: bold; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;\">//</span>&nbsp;返回一个整数。</p></li><li><p>4、在混合计算时，Python会把整型转换成为浮点数。</p></li></ul><p><br/></p>',',数组,',0,2,'2018-08-16 04:24:42','2018-08-16 04:25:27',0,'/static/upload/blog4.jpg'),(16,7,'admin','汇编数组','','<p style=\"text-align:justify;box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(0, 0, 10);\">c<span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">语言中对数组的声明方式如下：数据类型</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: Calibri;\">L&nbsp;</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">、整型常数</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: Calibri;\">N</span></span></p><p style=\"text-align:justify;box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(0, 0, 10);\">T &nbsp;A[N]<span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">；</span></span></p><p style=\"text-align:justify;box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(0, 0, 10);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">表示在内存中分配</span>N*L<span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">字节的连续区域，</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: Calibri;\">L</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">是数据类型</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: Calibri;\">T</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">的大小，</span></span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(0, 0, 10);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">表示起止位置，范围为</span>0<span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">—</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: Calibri;\">N-1</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">：数组元素索引</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: Calibri;\">i</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">的位置为</span></span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(0, 0, 10);\">+L*i</span></p><p style=\"text-align:justify;box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(0, 0, 10);\">&nbsp;</span></p><p style=\"text-align:justify;box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(0, 0, 10);\">IA32<span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">的存储器引用指令可以简化对数组的访问</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: Calibri;\">:%edx</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">表示为</span></span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(0, 0, 10);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">，</span>%ecx<span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">表示为</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: Calibri;\">i</span></span></p><p style=\"text-align:justify;box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(0, 0, 10);\">Movl (%edx, %ecx, 4), %eax</span></p><p style=\"text-align:justify;box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(0, 0, 10);\">c<span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">语言允许对指针进行运算，计算出来的值会根据该指针引用数据类型的大小进行伸缩。</span></span></p><p style=\"text-align:justify;box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(0, 0, 10);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">即在数组中对指针</span>P+1<span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">并非是对地址</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: Calibri;\">+1</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: 宋体;\">而是表示下一个元素的第一个字节的地址</span></span></p><p><br/></p>',',数组,',0,0,'2018-08-16 04:39:23','2018-08-16 04:41:13',0,'/static/upload/blog6.jpg'),(17,7,'admin','共识算法','','<h2 id=\"实用拜占庭容错系统pbft联盟链中常用\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\"><span style=\"color:CornflowerBlue;box-sizing: border-box; outline: 0px; word-break: break-all;\">实用拜占庭容错系统PBFT（联盟链中常用）</span></h2><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">拜占庭容错技术（Byzantine Fault Tolerance,BFT）是一类分布式计算领域的容错技术，是一种解决分布式系统容错问题的通用方案。实用拜占庭容错系统（Practical Byzantine Fault Tolerance，PBFT）使拜占庭协议的运行复杂度从指数级别降低到多项式级别，使拜占庭协议在分布式系统中应用成为可能。</p><h3 id=\"拜占庭将军问题\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 22px; color: rgb(79, 79, 79); line-height: 30px; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\" name=\"t1\"></a>拜占庭将军问题</h3><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">拜占庭将军（Byzantine Generals Problem）问题，是 Leslie Lamport 1982 年提出用来解释一致性问题的一个虚构模型。拜占庭是古代东罗马帝国的首都，由于地域宽广，守卫边境的多个将军（系统中的多个节点）需要通过信使来传递消息，达成某些一致的决定。但由于将军中可能存在叛徒（系统中节点出错），这些叛徒将努力向不同的将军发送不同的消息，试图会干扰一致性的达成。拜占庭问题即为在此情况下，如何让忠诚的将军们能达成行动的一致。</p><h3 id=\"拜占庭容错系统\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 22px; color: rgb(79, 79, 79); line-height: 30px; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\" name=\"t2\"></a>拜占庭容错系统</h3><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">拜占庭容错系统是指：在一个拥有<span class=\"MathJax\" id=\"MathJax-Element-1-Frame\" tabindex=\"0\" data-mathml=\"&lt;math xmlns=\" role=\"presentation\" style=\"box-sizing: border-box; outline: 0px; display: inline; line-height: normal; text-align: left; word-spacing: normal; overflow-wrap: normal; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; word-break: break-all; position: relative;\"><nobr aria-hidden=\"true\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; border: 0px; padding: 0px; margin: 0px; max-width: none; max-height: none; min-width: 0px; min-height: 0px; vertical-align: 0px; line-height: normal; word-break: break-all;\"><span class=\"math\" id=\"MathJax-Span-1\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; width: 0.732em;\"><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: relative; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; width: 0.576em; height: 0px; font-size: 19.2px;\"><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; position: absolute; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; clip: rect(1.565em, 1000.58em, 2.294em, -999.997em); top: -2.133em; left: 0em;\"><span class=\"mrow\" id=\"MathJax-Span-2\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all;\"><span class=\"mi\" id=\"MathJax-Span-3\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; font-family: MathJax_Math-italic;\">n</span></span><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; width: 0px; height: 2.138em;\"></span></span></span><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: static; border-width: 0px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-color: initial; border-image: initial; padding: 0px; margin: 0px; vertical-align: -0.059em; line-height: normal; word-break: break-all; overflow: hidden; width: 0px; height: 0.691em;\"></span></span></nobr><span class=\"MJX_Assistive_MathML\" role=\"presentation\" style=\"box-sizing: border-box; outline: 0px; top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); user-select: none; position: static; padding: 0px; border: 0px; display: inline; transition: none 0s ease 0s; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; height: 1px !important; width: 1px !important; overflow: hidden !important;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span>台节点的系统，整个系统，对每个请求满足如下条件：</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>所有非拜占庭节点使用相同的输入信息，产生同样的结果；</p></li><li><p>如果输入的信息正确，那么所有非拜占庭节点必须接收这个信息，并计算相应的结果。</p></li></ul><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">与此同时,在拜占庭系统的实际运行过程中一般假设系统中拜占庭节点不超过<span class=\"MathJax\" id=\"MathJax-Element-2-Frame\" tabindex=\"0\" data-mathml=\"&lt;math xmlns=\" role=\"presentation\" style=\"box-sizing: border-box; outline: 0px; display: inline; line-height: normal; text-align: left; word-spacing: normal; overflow-wrap: normal; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; word-break: break-all; position: relative;\"><nobr aria-hidden=\"true\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; border: 0px; padding: 0px; margin: 0px; max-width: none; max-height: none; min-width: 0px; min-height: 0px; vertical-align: 0px; line-height: normal; word-break: break-all;\"><span class=\"math\" id=\"MathJax-Span-4\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; width: 1.096em;\"><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: relative; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; width: 0.888em; height: 0px; font-size: 19.2px;\"><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; position: absolute; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; clip: rect(1.565em, 1000.89em, 2.294em, -999.997em); top: -2.133em; left: 0em;\"><span class=\"mrow\" id=\"MathJax-Span-5\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all;\"><span class=\"mi\" id=\"MathJax-Span-6\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; font-family: MathJax_Math-italic;\">m</span></span><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; width: 0px; height: 2.138em;\"></span></span></span><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: static; border-width: 0px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-color: initial; border-image: initial; padding: 0px; margin: 0px; vertical-align: -0.059em; line-height: normal; word-break: break-all; overflow: hidden; width: 0px; height: 0.691em;\"></span></span></nobr><span class=\"MJX_Assistive_MathML\" role=\"presentation\" style=\"box-sizing: border-box; outline: 0px; top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); user-select: none; position: static; padding: 0px; border: 0px; display: inline; transition: none 0s ease 0s; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; height: 1px !important; width: 1px !important; overflow: hidden !important;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>m</mi></math></span></span>台，并且对每个请求满足2个指标：</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>安全性——任何已经完成的请求都不会被更改，它可以在以后请求看到；</p></li><li><p>活性——可以接受并且执行非拜占庭客户端的请求，不会被任何因素影响而导致非拜占庭客户端的请求不能执行。</p></li></ul><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">拜占庭系统目前普遍采用的假设条件包括:&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>1) 拜占庭节点的行为可以是任意的，拜占庭节点之间可以共谋；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>2) 节点之间的错误是不相关的；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>3) 节点之间通过异步网络连接，网络中的消息可能丢失、乱序、延时到达；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>4) 服务器之间传递的信息,第三方可以知晓 ,但是不能窜改、伪造信息的内容和验证信息的完整性；</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\"><span style=\"color:CornflowerBlue;font-size:16px;box-sizing: border-box; outline: 0px; word-break: break-all;\">（<em style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">发生故障的节点称为拜占庭节点；正常的节点为非拜占庭节点。</em>）</span></p><h3 id=\"状态机拜占庭系统\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 22px; color: rgb(79, 79, 79); line-height: 30px; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\" name=\"t3\"></a>状态机拜占庭系统</h3><h4 id=\"状态机拜占庭系统的特点\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 20px; color: rgb(79, 79, 79); line-height: 28px; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">状态机拜占庭系统的特点</h4><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">状态机拜占庭系统的特点是整个系统共同维护一个状态,所有节点采取一致的行动,一般包括 3 种协议：<span style=\"color:CornflowerBlue;font-size:16px;box-sizing: border-box; outline: 0px; word-break: break-all;\">一致性协议</span>、&nbsp;<span style=\"color:CornflowerBlue;font-size:16px;box-sizing: border-box; outline: 0px; word-break: break-all;\">检查点协议</span>和<span style=\"color:CornflowerBlue;font-size:16px;box-sizing: border-box; outline: 0px; word-break: break-all;\">视图更换协议</span>。系统正常运行在一致性协议和检查点协议下，视图更换协议则是只有在主节点出错或者运行缓慢的情况下才会启动，负责维系系统继续执行客户端请求的能力。</p><h4 id=\"状态机拜占庭系统的核心协议\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 20px; color: rgb(79, 79, 79); line-height: 28px; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">状态机拜占庭系统的核心协议</h4><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\"><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">一、一致性协议</span>&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>一致性协议的目标是使来自客户端的请求在每个服务器上都按照一个确定的顺序执行。在协议中，一般有一个服务器被称作主节点，负责将客户端的请求排序；其余的服务器称作从节点，按照主节点提供的顺序执行请求。所有的服务器都在相同的配置信息下工作，这个配置信息称作view，每更换一次主节点，view就会随之变化。</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">一致性协议至少包含3个阶段：发送请求、序号分配和返回结果。根据协议设计的不同，可能包含相互交互、序号确认等阶段。</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">一致性协议解决一致性的方法主要有：&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>1）服务器之间两两交互，服务器通过将自己获得的信息传递给其他的服务器；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>2）由客户端收集服务器的信息，将收集的信息制作成证明文件再发送给服务器。对于一个包含<span class=\"MathJax\" id=\"MathJax-Element-3-Frame\" tabindex=\"0\" data-mathml=\"&lt;math xmlns=\" role=\"presentation\" style=\"box-sizing: border-box; outline: 0px; display: inline; line-height: normal; text-align: left; word-spacing: normal; overflow-wrap: normal; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; word-break: break-all; position: relative;\"><nobr aria-hidden=\"true\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; border: 0px; padding: 0px; margin: 0px; max-width: none; max-height: none; min-width: 0px; min-height: 0px; vertical-align: 0px; line-height: normal; word-break: break-all;\"><span class=\"math\" id=\"MathJax-Span-7\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; width: 3.701em;\"><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: relative; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; width: 3.076em; height: 0px; font-size: 19.2px;\"><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; position: absolute; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; clip: rect(1.357em, 1003.02em, 2.451em, -999.997em); top: -2.185em; left: 0em;\"><span class=\"mrow\" id=\"MathJax-Span-8\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all;\"><span class=\"mn\" id=\"MathJax-Span-9\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; font-family: MathJax_Main;\">3</span><span class=\"mi\" id=\"MathJax-Span-10\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; font-family: MathJax_Math-italic;\">m</span><span class=\"mo\" id=\"MathJax-Span-11\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline; position: static; border: 0px; padding: 0px 0px 0px 0.211em; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; font-family: MathJax_Main;\">+</span><span class=\"mn\" id=\"MathJax-Span-12\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline; position: static; border: 0px; padding: 0px 0px 0px 0.211em; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; font-family: MathJax_Main;\">1</span></span><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; width: 0px; height: 2.19em;\"></span></span></span><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: static; border-width: 0px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-color: initial; border-image: initial; padding: 0px; margin: 0px; vertical-align: -0.184em; line-height: normal; word-break: break-all; overflow: hidden; width: 0px; height: 1.003em;\"></span></span></nobr><span class=\"MJX_Assistive_MathML\" role=\"presentation\" style=\"box-sizing: border-box; outline: 0px; top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); user-select: none; position: static; padding: 0px; border: 0px; display: inline; transition: none 0s ease 0s; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; height: 1px !important; width: 1px !important; overflow: hidden !important;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>3</mn><mi>m</mi><mo>+</mo><mn>1</mn></math></span></span>台服务器的拜占庭系统，需要收集到<span class=\"MathJax\" id=\"MathJax-Element-4-Frame\" tabindex=\"0\" data-mathml=\"&lt;math xmlns=\" role=\"presentation\" style=\"box-sizing: border-box; outline: 0px; display: inline; line-height: normal; text-align: left; word-spacing: normal; overflow-wrap: normal; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; word-break: break-all; position: relative;\"><nobr aria-hidden=\"true\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; border: 0px; padding: 0px; margin: 0px; max-width: none; max-height: none; min-width: 0px; min-height: 0px; vertical-align: 0px; line-height: normal; word-break: break-all;\"><span class=\"math\" id=\"MathJax-Span-13\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; width: 3.701em;\"><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: relative; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; width: 3.076em; height: 0px; font-size: 19.2px;\"><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; position: absolute; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; clip: rect(1.357em, 1003.02em, 2.451em, -999.997em); top: -2.185em; left: 0em;\"><span class=\"mrow\" id=\"MathJax-Span-14\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all;\"><span class=\"mn\" id=\"MathJax-Span-15\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; font-family: MathJax_Main;\">2</span><span class=\"mi\" id=\"MathJax-Span-16\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; font-family: MathJax_Math-italic;\">m</span><span class=\"mo\" id=\"MathJax-Span-17\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline; position: static; border: 0px; padding: 0px 0px 0px 0.211em; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; font-family: MathJax_Main;\">+</span><span class=\"mn\" id=\"MathJax-Span-18\" style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline; position: static; border: 0px; padding: 0px 0px 0px 0.211em; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; font-family: MathJax_Main;\">1</span></span><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; width: 0px; height: 2.19em;\"></span></span></span><span style=\"box-sizing: border-box; outline: 0px; transition: none 0s ease 0s; display: inline-block; position: static; border-width: 0px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-color: initial; border-image: initial; padding: 0px; margin: 0px; vertical-align: -0.184em; line-height: normal; word-break: break-all; overflow: hidden; width: 0px; height: 1.003em;\"></span></span></nobr><span class=\"MJX_Assistive_MathML\" role=\"presentation\" style=\"box-sizing: border-box; outline: 0px; top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); user-select: none; position: static; padding: 0px; border: 0px; display: inline; transition: none 0s ease 0s; margin: 0px; vertical-align: 0px; line-height: normal; word-break: break-all; height: 1px !important; width: 1px !important; overflow: hidden !important;\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>2</mn><mi>m</mi><mo>+</mo><mn>1</mn></math></span></span>台服务器发送的一致信息，才能保证达成一致的非拜占庭服务器数量大于拜占庭服务器数量。</p><p><br/></p>',',Go,',1,0,'2018-08-16 05:48:55','2018-08-26 01:54:57',0,'/static/upload/blog7.jpg'),(18,7,'admin','POS算法','','<p><span style=\"color: rgb(79, 79, 79); font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" text-align:=\"\" background-color:=\"\">POS：也称股权证明，类似于财产储存在银行，这种模式会根据你持有数字货币的量和时间，分配给你相应的利息。&nbsp;</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(79, 79, 79); font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" text-align:=\"\" white-space:=\"\" background-color:=\"\"/><span style=\"color: rgb(79, 79, 79); font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" text-align:=\"\" background-color:=\"\">简单来说，就是一个根据你持有货币的量和时间，给你发利息的一个制度，在股权证明POS模式下，有一个名词叫币龄，每个币每天产生1币龄，比如你持有100个币，总共持有了30天，那么，此时你的币龄就为3000，这个时候，如果你发现了一个POS区块，你的币龄就会被清空为0。你每被清空365币龄，你将会从区块中获得0.05个币的利息(假定利息可理解为年利率5%)，那么在这个案例中，利息 = 3000 * 5% / 365 = 0.41个币，这下就很有意思了，持币有利息。</span></p>',',Go,',0,0,'2018-08-16 05:50:08','2018-08-26 01:56:50',0,'/static/upload/blog8.jpg'),(21,7,'admin','go语言链表','#00FF00','<p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">近来为了面试，复习了一下程杰老师写的《大话数据结构》，书里是代码是C语言写的，我用golang把它们重新实现一遍以及加入了自己的一点想法。</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">顺序表与链表是非常基本的数据结构，它们可以被统称为线性表。</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">线性表是由 n（n≥0）个数据元素（结点）a[0]，a[1]，a[2]…，a[n-1] 组成的有限序列。顺序表和链表，是线性表的不同存储结构。它们各自有不同的特点和适用范围。</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">下图摘自《大话数据结构》&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/><img src=\"https://img-blog.csdn.net/2018052323575827?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3R1b2JpY3VpNjUyMg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\" style=\"box-sizing: border-box; outline: 0px; margin: 24px 0px; max-width: 100%; word-break: break-all; cursor: zoom-in;\"/></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">代码如下：</p><pre class=\"prettyprint\" name=\"code\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow: auto hidden; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">package&nbsp;linkedlistimport&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&quot;errors&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;fmt&quot;)type&nbsp;ElemType&nbsp;interface{}//结点type&nbsp;Node&nbsp;struct&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;ElemType\r\n&nbsp;&nbsp;&nbsp;&nbsp;Next&nbsp;*Node\r\n}//链表type&nbsp;LinkedList&nbsp;struct&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;Head&nbsp;*Node&nbsp;//头结点}func&nbsp;CreateLinkedList()&nbsp;*LinkedList&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;head&nbsp;:=&nbsp;new(Node)&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&amp;LinkedList{head}\r\n}//获取第i个结点的值func&nbsp;(list&nbsp;*LinkedList)&nbsp;GetELem(i&nbsp;int)&nbsp;(ElemType,&nbsp;bool)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;j&nbsp;:=&nbsp;1\r\n&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;:=&nbsp;list.Head.Next&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//第一个结点\r\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;p&nbsp;!=&nbsp;nil&nbsp;&amp;&amp;&nbsp;j&nbsp;&lt;&nbsp;i&nbsp;{&nbsp;//p不等于nil或者j不等于i时，循环继续\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;p.Next\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j++\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;p&nbsp;==&nbsp;nil&nbsp;||&nbsp;j&nbsp;&gt;&nbsp;i&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;nil,&nbsp;false&nbsp;//第i个结点不存在\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;p.Data,&nbsp;true}//在第i个位置前插入元素func&nbsp;(list&nbsp;*LinkedList)&nbsp;Insert(i&nbsp;int,&nbsp;x&nbsp;ElemType)&nbsp;bool&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;j&nbsp;:=&nbsp;1\r\n&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;:=&nbsp;list.Head&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//第0个结点\r\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;p&nbsp;!=&nbsp;nil&nbsp;&amp;&amp;&nbsp;j&nbsp;&lt;&nbsp;i&nbsp;{&nbsp;//寻找第i-1个结点\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;p.Next\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j++\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;p&nbsp;==&nbsp;nil&nbsp;||&nbsp;j&nbsp;&gt;&nbsp;i&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false&nbsp;//第i-1个结点不存在，则第i个也不存在\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;:=&nbsp;&amp;Node{x,&nbsp;p.Next}\r\n&nbsp;&nbsp;&nbsp;&nbsp;p.Next&nbsp;=&nbsp;s&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true}//删除第i个结点func&nbsp;(list&nbsp;*LinkedList)&nbsp;Delete(i&nbsp;int)&nbsp;(ElemType,&nbsp;bool)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;j&nbsp;:=&nbsp;1\r\n&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;:=&nbsp;list.Head&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;p.Next&nbsp;!=&nbsp;nil&nbsp;&amp;&amp;&nbsp;j&nbsp;&lt;&nbsp;i&nbsp;{&nbsp;//寻找第i-1个结点\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;p.Next\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j++\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;p.Next&nbsp;==&nbsp;nil&nbsp;||&nbsp;j&nbsp;&gt;&nbsp;i&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;nil,&nbsp;false&nbsp;//第i个结点不存在\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;:=&nbsp;p.Next\r\n&nbsp;&nbsp;&nbsp;&nbsp;p.Next&nbsp;=&nbsp;q.Next&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;p.Data,&nbsp;true}//判断链表是否为空func&nbsp;(list&nbsp;*LinkedList)&nbsp;IsEmpty()&nbsp;bool&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;list.Head.Next&nbsp;==&nbsp;nil}//链表长度func&nbsp;(list&nbsp;*LinkedList)&nbsp;Len()&nbsp;int&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;length&nbsp;:=&nbsp;0\r\n&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;:=&nbsp;list.Head.Next&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;p&nbsp;!=&nbsp;nil&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;p.Next\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length++\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;length\r\n}//打印链表func&nbsp;(list&nbsp;*LinkedList)&nbsp;Print()&nbsp;error&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;list.IsEmpty()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;errors.New(&quot;this&nbsp;is&nbsp;an&nbsp;empty&nbsp;linked&nbsp;list&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;:=&nbsp;list.Head.Next&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;p&nbsp;!=&nbsp;nil&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fmt.Printf(&quot;%v&nbsp;&nbsp;&quot;,&nbsp;p.Data)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;p.Next\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;fmt.Println()&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;nil}123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104</pre><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, \" sf=\"\" ui=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">简单使用了一下：</p><pre class=\"prettyprint\" name=\"code\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow: auto hidden; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">package&nbsp;main\r\n\r\nimport&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&quot;fmt&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;learngo/lang/datastruct/linkedlist&quot;)\r\n\r\nfunc&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;list&nbsp;:=&nbsp;linkedlist.CreateLinkedList()\r\n&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;:=&nbsp;[]int{1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6,&nbsp;7}&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i,&nbsp;v&nbsp;:=&nbsp;range&nbsp;s&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list.Insert(i+1,&nbsp;v)\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;list.Print()\r\n&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;:=&nbsp;list.Insert(2,&nbsp;99)&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;!ok&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fmt.Println(&quot;insert&nbsp;fail&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;list.Print()\r\n&nbsp;&nbsp;&nbsp;&nbsp;fmt.Println(list.Len())\r\n\r\n}</pre><p><br/></p>',',Go,',0,0,'2018-08-25 03:47:36','2018-08-26 01:56:34',1,'/static/upload/blog1.jpg'),(22,7,'admin','go语言二叉树','#CC6633','<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; overflow-wrap: break-word; font-size: 12px; font-family: &quot;Courier New&quot; !important;\">//&nbsp;binary_tree&nbsp;二叉树package&nbsp;Algorithm\r\n\r\nimport&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&quot;reflect&quot;)//&nbsp;二叉树定义type&nbsp;BinaryTree&nbsp;struct&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;&nbsp;&nbsp;interface{}\r\n&nbsp;&nbsp;&nbsp;&nbsp;Lchild&nbsp;*BinaryTree\r\n&nbsp;&nbsp;&nbsp;&nbsp;Rchild&nbsp;*BinaryTree\r\n}//&nbsp;构造方法func&nbsp;NewBinaryTree(data&nbsp;interface{})&nbsp;*BinaryTree&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&amp;BinaryTree{Data:&nbsp;data}\r\n}//&nbsp;先序遍历func&nbsp;(bt&nbsp;*BinaryTree)&nbsp;PreOrder()&nbsp;[]interface{}&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;:=&nbsp;bt\r\n&nbsp;&nbsp;&nbsp;&nbsp;stack&nbsp;:=&nbsp;NewStack(reflect.TypeOf(bt))\r\n&nbsp;&nbsp;&nbsp;&nbsp;res&nbsp;:=&nbsp;make([]interface{},&nbsp;0)&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;t&nbsp;!=&nbsp;nil&nbsp;||&nbsp;!stack.Empty()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;t&nbsp;!=&nbsp;nil&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res&nbsp;=&nbsp;append(res,&nbsp;t.Data)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack.Push(t)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;=&nbsp;t.Lchild\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;!stack.Empty()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v,&nbsp;_&nbsp;:=&nbsp;stack.Pop()\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;=&nbsp;v.(*BinaryTree)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;=&nbsp;t.Rchild\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;res\r\n}//&nbsp;中序遍历func&nbsp;(bt&nbsp;*BinaryTree)&nbsp;InOrder()&nbsp;[]interface{}&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;:=&nbsp;bt\r\n&nbsp;&nbsp;&nbsp;&nbsp;stack&nbsp;:=&nbsp;NewStack(reflect.TypeOf(bt))\r\n&nbsp;&nbsp;&nbsp;&nbsp;res&nbsp;:=&nbsp;make([]interface{},&nbsp;0)&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;t&nbsp;!=&nbsp;nil&nbsp;||&nbsp;!stack.Empty()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;t&nbsp;!=&nbsp;nil&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack.Push(t)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;=&nbsp;t.Lchild\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;!stack.Empty()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v,&nbsp;_&nbsp;:=&nbsp;stack.Pop()\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;=&nbsp;v.(*BinaryTree)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res&nbsp;=&nbsp;append(res,&nbsp;t.Data)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;=&nbsp;t.Rchild\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;res\r\n}//&nbsp;后续遍历func&nbsp;(bt&nbsp;*BinaryTree)&nbsp;PostOrder()&nbsp;[]interface{}&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;:=&nbsp;bt\r\n&nbsp;&nbsp;&nbsp;&nbsp;stack&nbsp;:=&nbsp;NewStack(reflect.TypeOf(bt))\r\n&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;:=&nbsp;NewStack(reflect.TypeOf(true))\r\n&nbsp;&nbsp;&nbsp;&nbsp;res&nbsp;:=&nbsp;make([]interface{},&nbsp;0)&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;t&nbsp;!=&nbsp;nil&nbsp;||&nbsp;!stack.Empty()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;t&nbsp;!=&nbsp;nil&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack.Push(t)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.Push(false)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;=&nbsp;t.Lchild\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;flag,&nbsp;_&nbsp;:=&nbsp;s.Top();&nbsp;!stack.Empty()&nbsp;&amp;&amp;&nbsp;flag.(bool);&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.Pop()\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v,&nbsp;_&nbsp;:=&nbsp;stack.Pop()\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res&nbsp;=&nbsp;append(res,&nbsp;v.(*BinaryTree).Data)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flag,&nbsp;_&nbsp;=&nbsp;s.Top()\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;!stack.Empty()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.Pop()\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.Push(true)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v,&nbsp;_&nbsp;:=&nbsp;stack.Top()\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;=&nbsp;v.(*BinaryTree)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;=&nbsp;t.Rchild\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;res\r\n}</pre><p><br/></p>',',数组,',0,0,'2018-08-25 03:57:19','2018-08-25 03:58:12',1,'/static/upload/blog10.jpg'),(23,7,'admin','Go數組','#99CC33','<h1 style=\"border: 0px; margin: 0px 0px 10px; padding: 0px; font-size: 2.1em; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">Go 语言数组</h1><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\">Go 语言提供了数组类型的数据结构。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\">数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整形、字符串或者自定义类型。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\">相对于去声明number0, number1, ..., and number99的变量，使用数组形式numbers[0], numbers[1] ..., numbers[99]更加方便且易于扩展。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\">数组元素可以通过索引（位置）来读取（或者修改），索引从0开始，第一个元素索引为 0，第二个索引为 1，以此类推。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\"><img src=\"http://www.runoob.com/wp-content/uploads/2015/06/arrays.jpg\" alt=\"\" style=\"border: 0px; margin: 0px; padding: 0px; max-width: 100%; height: auto;\"/></p><hr style=\"background-color: rgb(212, 212, 212); color: rgb(212, 212, 212); height: 1px; border: 0px; clear: both; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" font-size:=\"\" white-space:=\"\"/><h2 style=\"border: 0px; margin: 2px 0px; padding: 0px; font-size: 1.8em; line-height: 1.8em; color: rgb(51, 51, 51); font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">声明数组</h2><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\">Go 语言数组声明需要指定元素类型及元素个数，语法格式如下：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, \" andale=\"\" lucida=\"\" courier=\"\" white-space:=\"\" word-break:=\"\" overflow-wrap:=\"\" background-image:=\"\" background-position:=\"\" center=\"\" background-color:=\"\" color:=\"\">var&nbsp;variable_name&nbsp;[SIZE]&nbsp;variable_type</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\">以上为一维数组的定义方式。数组长度必须是整数且大于 0。例如以下定义了数组 balance 长度为 10 类型为 float32：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, \" andale=\"\" lucida=\"\" courier=\"\" white-space:=\"\" word-break:=\"\" overflow-wrap:=\"\" background-image:=\"\" background-position:=\"\" center=\"\" background-color:=\"\" color:=\"\">var&nbsp;balance&nbsp;[10]&nbsp;float32</pre><hr style=\"background-color: rgb(212, 212, 212); color: rgb(212, 212, 212); height: 1px; border: 0px; clear: both; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" font-size:=\"\" white-space:=\"\"/><h2 style=\"border: 0px; margin: 2px 0px; padding: 0px; font-size: 1.8em; line-height: 1.8em; color: rgb(51, 51, 51); font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">初始化数组</h2><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\">以下演示了数组初始化：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, \" andale=\"\" lucida=\"\" courier=\"\" white-space:=\"\" word-break:=\"\" overflow-wrap:=\"\" background-image:=\"\" background-position:=\"\" center=\"\" background-color:=\"\" color:=\"\">var&nbsp;balance&nbsp;=&nbsp;[5]float32{1000.0,&nbsp;2.0,&nbsp;3.4,&nbsp;7.0,&nbsp;50.0}</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\">初始化数组中 {} 中的元素个数不能大于 [] 中的数字。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\">如果忽略 [] 中的数字不设置数组大小，Go 语言会根据元素的个数来设置数组的大小：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, \" andale=\"\" lucida=\"\" courier=\"\" white-space:=\"\" word-break:=\"\" overflow-wrap:=\"\" background-image:=\"\" background-position:=\"\" center=\"\" background-color:=\"\" color:=\"\">&nbsp;var&nbsp;balance&nbsp;=&nbsp;[...]float32{1000.0,&nbsp;2.0,&nbsp;3.4,&nbsp;7.0,&nbsp;50.0}</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\">该实例与上面的实例是一样的，虽然没有设置数组的大小。</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, \" andale=\"\" lucida=\"\" courier=\"\" white-space:=\"\" word-break:=\"\" overflow-wrap:=\"\" background-image:=\"\" background-position:=\"\" center=\"\" background-color:=\"\" color:=\"\">&nbsp;balance[4]&nbsp;=&nbsp;50.0</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\">以上实例读取了第五个元素。数组元素可以通过索引（位置）来读取（或者修改），索引从0开始，第一个元素索引为 0，第二个索引为 1，以此类推。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\"><img src=\"http://www.runoob.com/wp-content/uploads/2015/06/array_presentation.jpg\" alt=\"\" style=\"border: 0px; margin: 0px; padding: 0px; max-width: 100%; height: auto;\"/></p><hr style=\"background-color: rgb(212, 212, 212); color: rgb(212, 212, 212); height: 1px; border: 0px; clear: both; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" font-size:=\"\" white-space:=\"\"/><h2 style=\"border: 0px; margin: 2px 0px; padding: 0px; font-size: 1.8em; line-height: 1.8em; color: rgb(51, 51, 51); font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" white-space:=\"\" background-color:=\"\">访问数组元素</h2><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\">数组元素可以通过索引（位置）来读取。格式为数组名后加中括号，中括号中为索引的值。例如：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, \" andale=\"\" lucida=\"\" courier=\"\" white-space:=\"\" word-break:=\"\" overflow-wrap:=\"\" background-image:=\"\" background-position:=\"\" center=\"\" background-color:=\"\" color:=\"\">var&nbsp;salary&nbsp;float32&nbsp;=&nbsp;balance[9]</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\">以上实例读取了数组balance第10个元素的值。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\">以下演示了数组完整操作（声明、赋值、访问）的实例：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, \" andale=\"\" lucida=\"\" courier=\"\" white-space:=\"\" word-break:=\"\" overflow-wrap:=\"\" background-image:=\"\" background-position:=\"\" center=\"\" background-color:=\"\" color:=\"\">package&nbsp;mainimport&nbsp;&quot;fmt&quot;func&nbsp;main()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;var&nbsp;n&nbsp;[10]int&nbsp;/*&nbsp;n&nbsp;是一个长度为&nbsp;10&nbsp;的数组&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;var&nbsp;i,j&nbsp;int\r\n\r\n&nbsp;&nbsp;&nbsp;/*&nbsp;为数组&nbsp;n&nbsp;初始化元素&nbsp;*/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;10;&nbsp;i++&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n[i]&nbsp;=&nbsp;i&nbsp;+&nbsp;100&nbsp;/*&nbsp;设置元素为&nbsp;i&nbsp;+&nbsp;100&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;/*&nbsp;输出每个数组元素的值&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;for&nbsp;j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&lt;&nbsp;10;&nbsp;j++&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fmt.Printf(&quot;Element[%d]&nbsp;=&nbsp;%d\\n&quot;,&nbsp;j,&nbsp;n[j]&nbsp;)\r\n&nbsp;&nbsp;&nbsp;}}</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" microsoft=\"\" noto=\"\" cjk=\"\" wenquanyi=\"\" micro=\"\" color:=\"\" white-space:=\"\" background-color:=\"\">以上实例执行结果如下：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, \" andale=\"\" lucida=\"\" courier=\"\" white-space:=\"\" word-break:=\"\" overflow-wrap:=\"\" background-image:=\"\" background-position:=\"\" center=\"\" background-color:=\"\" color:=\"\">Element[0]&nbsp;=&nbsp;100Element[1]&nbsp;=&nbsp;101Element[2]&nbsp;=&nbsp;102Element[3]&nbsp;=&nbsp;103Element[4]&nbsp;=&nbsp;104Element[5]&nbsp;=&nbsp;105Element[6]&nbsp;=&nbsp;106Element[7]&nbsp;=&nbsp;107Element[8]&nbsp;=&nbsp;108Element[9]&nbsp;=&nbsp;109</pre><p><span class=\"lit\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 102, 102);\"><br/></span></p><p><br/></p>',',数组,',2,0,'2018-08-25 04:02:36','2018-08-25 04:04:24',1,'/static/upload/blog1.jpg'),(29,7,'admin','Python數組','#996600','<p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 18px;\"><strong style=\"box-sizing: border-box;\">Python数组列表</strong></span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\">数组是一种有序的集合，可以随时添加和删除其中的元素。</span></p><hr style=\"box-sizing: border-box; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;<span style=\"box-sizing: border-box; font-size: 16px;\"><strong style=\"box-sizing: border-box;\">一、数组定义：</strong></span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\">数组是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。 数组的数据项不需要具有相同的类型 创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。</span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\"><img src=\"https://images2017.cnblogs.com/blog/1165006/201712/1165006-20171205165633550-1879398996.png\" alt=\"\" style=\"border: 0px; box-sizing: border-box; max-width: 900px;\"/></span></p><hr style=\"box-sizing: border-box; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 16px;\"><strong style=\"box-sizing: border-box;\">二、访问数组元素</strong></span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\">用索引来访问list中每一个位置的元素，记得索引是从0开始的</span>：</p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"https://images2017.cnblogs.com/blog/1165006/201712/1165006-20171205165708644-2123688482.png\" alt=\"\" style=\"border: 0px; box-sizing: border-box; max-width: 900px;\"/></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\">运行结果：</span></p><p style=\"box-sizing: border-box; margin: 10px auto 10px 30px; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\">Nancy<br style=\"box-sizing: border-box;\"/>Anne<br style=\"box-sizing: border-box;\"/>Rainbow<br style=\"box-sizing: border-box;\"/>[&#39;Anne&#39;, &#39;Hugh&#39;]</p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\">注意： 当索引超出了范围时，Python会报一个IndexError错误，所以，要确保索引不要越界</span></p><hr style=\"box-sizing: border-box; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;<span style=\"box-sizing: border-box; font-size: 16px;\"><strong style=\"box-sizing: border-box;\">三、更新数组元素</strong></span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\">你可以对列表的数据项进行修改或更新，你也可以使用append()、insert()方法来添加列表项</span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\">1.末尾追加元素</span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; overflow-wrap: break-word; box-sizing: border-box; color: rgb(75, 75, 75); font-size: 13px; background-color: rgb(255, 255, 255);\"><br/></pre><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\">2.指定位置添加元素</span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\"><img src=\"https://images2017.cnblogs.com/blog/1165006/201712/1165006-20171205165757800-740668381.png\" alt=\"\" style=\"border: 0px; box-sizing: border-box; max-width: 900px;\"/></span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\">3.修改元素</span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\"><img src=\"https://images2017.cnblogs.com/blog/1165006/201712/1165006-20171205165813769-887778936.png\" alt=\"\" style=\"border: 0px; box-sizing: border-box; max-width: 900px;\"/></span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\">运行结果：</span></p><p style=\"box-sizing: border-box; margin: 10px auto 10px 30px; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\">[&#39;Nancy&#39;, &#39;Anne&#39;, &#39;Hugh&#39;, &#39;Rainbow&#39;, &#39;5xw&#39;]<br style=\"box-sizing: border-box;\"/>[&#39;hello&#39;, &#39;Nancy&#39;, &#39;Anne&#39;, &#39;Hugh&#39;, &#39;Rainbow&#39;, &#39;5xw&#39;]<br style=\"box-sizing: border-box;\"/>[&#39;No.1&#39;, &#39;Nancy&#39;, &#39;Anne&#39;, &#39;Hugh&#39;, &#39;Rainbow&#39;, &#39;5xw&#39;]</p><hr style=\"box-sizing: border-box; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;<span style=\"box-sizing: border-box; font-size: 16px;\"><strong style=\"box-sizing: border-box;\">四、删除数组元素</strong></span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\">1、删除末尾元素</span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; overflow-wrap: break-word; box-sizing: border-box; color: rgb(75, 75, 75); font-size: 13px; background-color: rgb(255, 255, 255);\"><br/></pre><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\">2.删除指定位置元素</span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; overflow-wrap: break-word; box-sizing: border-box; color: rgb(75, 75, 75); font-size: 13px; background-color: rgb(255, 255, 255);\">&nbsp;<br/></pre><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\">运行结果：</span></p><p style=\"box-sizing: border-box; margin: 10px auto 10px 30px; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\">[&#39;No.1&#39;, &#39;Nancy&#39;, &#39;Anne&#39;, &#39;Hugh&#39;, &#39;Rainbow&#39;]<br style=\"box-sizing: border-box;\"/>[&#39;No.1&#39;, &#39;Nancy&#39;, &#39;Hugh&#39;, &#39;Rainbow&#39;]<br style=\"box-sizing: border-box;\"/>[&#39;No.1&#39;, &#39;Nancy&#39;, &#39;Rainbow&#39;]</p><hr style=\"box-sizing: border-box; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;<span style=\"box-sizing: border-box; font-size: 16px;\"><strong style=\"box-sizing: border-box;\">五、数组脚本操作符</strong></span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\">列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。</span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"https://images2017.cnblogs.com/blog/1165006/201712/1165006-20171205103916581-20638411.png\" alt=\"\" style=\"border: 0px; box-sizing: border-box; max-width: 900px;\"/></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><hr style=\"box-sizing: border-box; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 16px;\"><strong style=\"box-sizing: border-box;\">六、数组函数&amp;方法</strong></span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\">1.函数</span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-size: 15px;\"><img src=\"https://images2017.cnblogs.com/blog/1165006/201712/1165006-20171205104404988-1194315135.png\" alt=\"\" style=\"border: 0px; box-sizing: border-box; max-width: 900px;\"/></span></p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\">2.方法</p><p style=\"box-sizing: border-box; margin: 10px auto; color: rgb(75, 75, 75); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"https://images2017.cnblogs.com/blog/1165006/201712/1165006-20171205105028019-1550722918.png\" alt=\"\" style=\"border: 0px; box-sizing: border-box; max-width: 900px;\"/></p><p><br/></p>',',Python,',0,0,'2018-08-26 09:55:34','2018-08-26 01:58:38',0,'/static/upload/blog2.jpg'),(30,7,'admin','Python链表','#00CC00','<p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">链表的定义：</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">　　<span style=\"margin: 0px; padding: 0px;\">链表(linked list)是由一组被称为结点的数据元素组成的数据结构，每个结点都包含结点本身的信息和指向下一个结点的地址。由于每个结点都包含了可以链接起来的地址信息，所以用一个变量就能够访问整个结点序列。也就是说，结点包含两部分信息：一部分用于存储数据元素的值，称为信息域；另一部分用于存储下一个数据元素地址的指针，称为指针域。链表中的第一个结点的地址存储在一个单独的结点中，称为头结点或首结点。链表中的最后一个结点没有后继元素，其指针域为空。</span>　　</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">如下图所示：</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"https://images0.cnblogs.com/blog/51154/201311/08101439-05242b17400844169e8e6a671c0955a1.jpg\" alt=\"\" style=\"margin: 0px; padding: 0px; border: 0px; max-width: 820px;\"/></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">单链表的结构：</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"https://images0.cnblogs.com/blog/51154/201311/08101605-4dca2917e4164bcfaf78b3625b589b96.jpg\" alt=\"\" style=\"margin: 0px; padding: 0px; border: 0px; max-width: 820px;\"/></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">单链表的插入和删除示意图：</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"https://images0.cnblogs.com/blog/51154/201311/08101617-50347cb58527433cb83665ce43c7b338.jpg\" alt=\"\" style=\"margin: 0px; padding: 0px; border: 0px; max-width: 820px;\"/></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">python实现代码：</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration-line: underline; border: none !important;\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin: 0px; padding: 0px; max-width: 820px; border: none !important;\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; overflow-wrap: break-word; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\">#!/usr/bin/python#&nbsp;-*-&nbsp;coding:&nbsp;utf-8&nbsp;-*-class&nbsp;Node(object):&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;__init__(self,val,p=0):\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.data&nbsp;=&nbsp;val\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.next&nbsp;=&nbsp;pclass&nbsp;LinkList(object):&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;__init__(self):\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.head&nbsp;=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;__getitem__(self,&nbsp;key):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;self.is_empty():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;&#39;linklist&nbsp;is&nbsp;empty.&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif&nbsp;key&nbsp;&lt;0&nbsp;&nbsp;or&nbsp;key&nbsp;&gt;&nbsp;self.getlength():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;&#39;the&nbsp;given&nbsp;key&nbsp;is&nbsp;error&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;self.getitem(key)&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;__setitem__(self,&nbsp;key,&nbsp;value):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;self.is_empty():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;&#39;linklist&nbsp;is&nbsp;empty.&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif&nbsp;key&nbsp;&lt;0&nbsp;&nbsp;or&nbsp;key&nbsp;&gt;&nbsp;self.getlength():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;&#39;the&nbsp;given&nbsp;key&nbsp;is&nbsp;error&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.delete(key)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;self.insert(key)&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;initlist(self,data):\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.head&nbsp;=&nbsp;Node(data[0])\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;self.head&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;data[1:]:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node&nbsp;=&nbsp;Node(i)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.next&nbsp;=&nbsp;node\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;p.next&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;getlength(self):\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;&nbsp;self.head\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length&nbsp;=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;p!=0:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length+=1\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;p.next&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;length&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;is_empty(self):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;self.getlength()&nbsp;==0:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;False&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;clear(self):\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.head&nbsp;=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;append(self,item):\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;Node(item)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;self.head&nbsp;==0:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.head&nbsp;=&nbsp;q&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;self.head&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;p.next!=0:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;p.next\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.next&nbsp;=&nbsp;q&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;getitem(self,index):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;self.is_empty():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;&#39;Linklist&nbsp;is&nbsp;empty.&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j&nbsp;=&nbsp;0\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;self.head&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;p.next!=0&nbsp;and&nbsp;j&nbsp;&lt;index:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;p.next\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j+=1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;j&nbsp;==index:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;p.data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;&#39;target&nbsp;is&nbsp;not&nbsp;exist!&#39;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;insert(self,index,item):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;self.is_empty()&nbsp;or&nbsp;index&lt;0&nbsp;or&nbsp;index&nbsp;&gt;self.getlength():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;&#39;Linklist&nbsp;is&nbsp;empty.&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;index&nbsp;==0:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;Node(item,self.head)\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.head&nbsp;=&nbsp;q\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;self.head\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;post&nbsp;&nbsp;=&nbsp;self.head\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j&nbsp;=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;p.next!=0&nbsp;and&nbsp;j&lt;index:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;post&nbsp;=&nbsp;p\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;p.next\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j+=1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;index&nbsp;==j:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;Node(item,p)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;post.next&nbsp;=&nbsp;q\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.next&nbsp;=&nbsp;p&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;delete(self,index):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;self.is_empty()&nbsp;or&nbsp;index&lt;0&nbsp;or&nbsp;index&nbsp;&gt;self.getlength():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;&#39;Linklist&nbsp;is&nbsp;empty.&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;index&nbsp;==0:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;Node(item,self.head)\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.head&nbsp;=&nbsp;q\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;self.head\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;post&nbsp;&nbsp;=&nbsp;self.head\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j&nbsp;=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;p.next!=0&nbsp;and&nbsp;j&lt;index:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;post&nbsp;=&nbsp;p\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;p.next\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j+=1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;index&nbsp;==j:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;post.next&nbsp;=&nbsp;p.next&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;index(self,value):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;self.is_empty():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;&#39;Linklist&nbsp;is&nbsp;empty.&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;self.head\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;p.next!=0&nbsp;and&nbsp;not&nbsp;p.data&nbsp;==value:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;p.next\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i+=1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;p.data&nbsp;==&nbsp;value:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1l&nbsp;=&nbsp;LinkList()\r\nl.initlist([1,2,3,4,5])print&nbsp;l.getitem(4)\r\nl.append(6)print&nbsp;l.getitem(5)\r\n\r\nl.insert(4,40)print&nbsp;l.getitem(3)print&nbsp;l.getitem(4)print&nbsp;l.getitem(5)\r\n\r\nl.delete(5)print&nbsp;l.getitem(5)\r\n\r\nl.index(5)</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration-line: underline; border: none !important;\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin: 0px; padding: 0px; max-width: 820px; border: none !important;\"/></a></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">结果：</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">5<br style=\"margin: 0px; padding: 0px;\"/>6<br style=\"margin: 0px; padding: 0px;\"/>4<br style=\"margin: 0px; padding: 0px;\"/>40<br style=\"margin: 0px; padding: 0px;\"/>5<br style=\"margin: 0px; padding: 0px;\"/>6</p><p><br/></p>',',Python,',0,0,'2018-08-24 09:55:44','2018-08-26 02:00:49',0,'/static/upload/blog4.jpg'),(31,7,'admin','C++数组','','<p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">一、一维数组</p><ol style=\"padding: 0px 0px 0px 40px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p><br/></p></li><ol style=\"list-style-type: lower-alpha;\" class=\" list-paddingleft-2\"><li><p>静态 int array[100]; 　　定义了数组array，并未对数组进行初始化</p></li><li><p>静态&nbsp;int array[100] = {1，2}；　　定义并初始化了数组array</p></li><li><p>动态&nbsp;int* array = new int[100]; &nbsp;delete []array;　　分配了长度为100的数组array&nbsp;</p></li><li><p>动态&nbsp;int* array = new int[100](1，2);&nbsp;　delete []array;　为长度为100的数组array初始化前两个元素</p></li></ol></ol><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">二、二维数组</p><ol style=\"padding: 0px 0px 0px 40px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p><br/></p></li><ol style=\"list-style-type: lower-alpha;\" class=\" list-paddingleft-2\"><li><p>静态 int array[10][10];　　定义了数组，并未初始化</p></li><li><p>静态 int array[10][10] = { {1,1} , {2,2} };　　数组初始化了array[0][0,1]及array[1][0,1]</p></li><li><p>动态 int (*array)[n] = new int[m][n]; delete []array;</p></li><li><p>动态 int** array = new int*[m];　for(i) array[i] = new int[n]; &nbsp;for(i) delete []array[i]; delete []array; &nbsp; &nbsp;多次析构</p></li><li><p>动态 int* array = new int[m][n]; &nbsp;delete []array; &nbsp; &nbsp; &nbsp;数组按行存储</p></li></ol></ol><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">三、多维数组</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">　　int* array = new int[m][3][4]; &nbsp; &nbsp;只有第一维可以是变量，其他维数必须是常量，否则会报错</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; delete []array; &nbsp; &nbsp; &nbsp; 必须进行内存释放，否则内存将泄漏</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">四、数组作为函数形参传递</p><ol style=\"padding: 0px 0px 0px 40px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p><br/></p></li><ol style=\"list-style-type: lower-alpha;\" class=\" list-paddingleft-2\"><li><p>　　void func(int** array);</p></li><li><p>　　void func(int (*array)[n]);　　　　　　　　　　　　　　　　　　</p></li><li><p>　　void func(int* array);</p></li><li><p>　　void func(int array[]);　　　　</p></li><li><p>一维数组传递：</p></li><li><p>二维数组传递：</p></li></ol><ol style=\"list-style-type: lower-alpha;\" class=\" list-paddingleft-2\"></ol></ol><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">数组名作为函数形参时，在函数体内，其失去了本身的内涵，仅仅只是一个指针，而且在其失去其内涵的同时，它还失去了其常量特性，可以作自增、自减等操作，可以被修改。</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">五、字符数组</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">char类型的数组被常委字符数组，在字符数组中最后一位为转移字符&#39;\\0&#39;（也被成为空字符），该字符表示字符串已结束。在C++中定义了string类，在Visual C++中定义了Cstring类。</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">字符串中每一个字符占用一个字节，再加上最后一个空字符。如：</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">char array[10] = &quot;cnblogs&quot;;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">虽然只有7个字节，但是字符串长度为8个字节。</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">也可以不用定义字符串长度，如：</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">char array[] = &quot;cnblogs&quot;;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p><br/></p>',',C++,',0,0,'2018-08-24 13:40:29','2018-08-26 02:02:17',0,'/static/upload/blog4.jpg'),(32,7,'admin','C++链表','','<p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">我们知道，数组式计算机根据事先定义好的数组类型与长度自动为其分配一连续的存储单元，相同数组的位置和距离都是固定的，也就是说，任何一个数组元素的地址都可一个简单的公式计算出来，因此这种结构可以有效的对数组元素进行随机访问。但若对数组元素进行插入和删除操作，则会引起大量数据的移动，从而使简单的数据处理变得非常复杂，低效。</span></span></p><p><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;为了能有效地解决这些问题，一种称为“链表”的数据结构得到了广泛应用。</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/></span></span><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; background-color: rgb(255, 255, 255);\"></span></p><h1 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 28px; color: rgb(79, 79, 79); line-height: 36px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\" name=\"t0\"></a><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px; font-weight: normal;\">1． 链表概述</span></span></span></h1><p><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;链表是一种动态数据结构，他的特点是用一组任意的存储单元（可以是连续的，也可以是不连续的）存放数据元素。</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">链表中每一个元素成为“结点”，每一个结点都是由数据域和指针域组成的，每个结点中的指针域指向下一个结点。Head是“头指针”，表示链表的开始，用来指向第一个结点，</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">而最后一个指针的指针域为NULL(空地址)，表示链表的结束。</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;可以看出链表结构必须利用指针才能实现，即一个结点中必须包含一个指针变量，用来存放下一个结点的地址。</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;实际上，链表中的每个结点可以用若干个数据和若干个指针。结点中只有一个指针的链表称为单链表，这是最简单的链表结构。</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/></span></span><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; background-color: rgb(255, 255, 255);\"></span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;在c++中实现一个单链表结构比较简单。例如，可定义单链表结构的最简单形式如下</span></span></span></p><p><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">struct Node</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">{</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;int Data;</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;Node*next;</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/></span></span><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; background-color: rgb(255, 255, 255);\"></span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">};</span></span></span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/></span></span></span></p><p><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;这里用到了结构体类型。其中，*next是指针域，用来指向该结点的下一个结点；Data是一个整形变量，用来存放结点中的数据。当然，Data可以是任何数据类型，包括结构体类型或类类型。</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;在此基础上，我们在定义一个链表类list，其中包含链表结点的插入，删除，输出等功能的成员函数。</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">class list</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">{</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;Node*head;</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;public:</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp; &nbsp; list(){head=NULL;}</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp; &nbsp; void insertlist(int aDate,int bDate);//链表结点的插入</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/></span></span><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; background-color: rgb(255, 255, 255);\"></span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp; &nbsp; void Deletelist(int aDate);//链表结点的删除</span></span></span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp; &nbsp; void Outputlist();//链表结点的输出</span></span></span></p><p><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp; &nbsp; Node*Gethead(){return head;}</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">};</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/></span></span><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; background-color: rgb(255, 255, 255);\"></span></p><h1 style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 28px; color: rgb(79, 79, 79); line-height: 36px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\" name=\"t1\"></a><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px; font-weight: normal;\">2． 链表结点的访问</span></span></span></h1><p><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;由于链表中的各个结点是由指针链接在一起的，其存储单元文笔是连续的，因此，对其中任意结点的地址无法向数组一样，用一个简单的公式计算出来，进行随机访问。只能从链表的头指针（即head）开始，用一个指针p先指向第一个结点，然后根据结点p找到下一个结点。以此类推，直至找到所要访问的结点或到最后一个结点（指针为空）为止。</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">下面我们给出上述链表的输出函数</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">void list::outputlist()</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">{</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;Node*current=head;</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;while(current!=NULL)</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;{</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp; &nbsp; cout&lt;&lt;current-&gt;Data&lt;&lt;&quot; &quot;;</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp; &nbsp; current=current-&gt;next;</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;}</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">&nbsp; &nbsp;cout&lt;&lt;endl;</span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\"/><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: simsun; line-height: 21px;\">}</span></span></span></p><p><br/></p>',',C++,',0,0,'2018-08-07 05:20:43','2018-08-26 02:04:55',1,'/static/upload/blog6.jpg'),(33,7,'admin','C#数组','','<p><strong style=\"font-family: Verdana, Arial, Helvetica, sans-serif;font-size: 14px;white-space: normal;background-color: rgb(255, 255, 255)\">数组概述</strong><strong style=\"font-family: Verdana, Arial, Helvetica, sans-serif;font-size: 14px;white-space: normal;background-color: rgb(255, 255, 255)\"></strong></p><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">C#&nbsp;数组从零开始建立索引，即数组索引从零开始。C#&nbsp;中数组的工作方式与在大多数其他流行语言中的工作方式类似。但还有一些差异应引起注意。</p><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">声明数组时，<span style=\"color: red\">方括号&nbsp;([])&nbsp;必须跟在类型后面，而不是标识符后面</span>。在&nbsp;C#&nbsp;中，将方括号放在标识符后是不合法的语法。</p><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">int[] table; // not int table[];&nbsp;</p><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">另一细节是，<span style=\"color: red\">数组的大小不是其类型的一部分</span>，而在&nbsp;C&nbsp;语言中它却是数组类型的一部分。这使您可以声明一个数组并向它分配&nbsp;int&nbsp;对象的任意数组，而不管数组长度如何。</p><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">int[] numbers; // declare numbers as an int array of any size</p><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">numbers = new int[10];&nbsp;&nbsp;// numbers is a 10-element array</p><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">numbers = new int[20];&nbsp;&nbsp;// now it&#39;s a 20-element array</p><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">&nbsp;<strong>声明数组</strong></p><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">C#&nbsp;支持一维数组、多维数组（矩形数组）和数组的数组（交错的数组）。下面的示例展示如何声明不同类型的数组：</p><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">一维数组：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[]&nbsp;numbers;</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">多维数组：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">string[,]&nbsp;names;</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">数组的数组（交错的）：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">byte[][]&nbsp;scores;</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">声明数组（如上所示）并不实际创建它们。<span style=\"color: red\">在&nbsp;C#&nbsp;中，数组是对象</span>（本教程稍后讨论），必须进行实例化。下面的示例展示如何创建数组：</p><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">一维数组：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[]&nbsp;numbers&nbsp;=&nbsp;new&nbsp;int[5];</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">多维数组：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">string[,]&nbsp;names&nbsp;=&nbsp;new&nbsp;string[5,4];</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">数组的数组（交错的）：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">byte[][]&nbsp;scores&nbsp;=&nbsp;new&nbsp;byte[5][];</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">for&nbsp;(int&nbsp;x&nbsp;=&nbsp;0;&nbsp;x&nbsp;&lt;&nbsp;scores.Length;&nbsp;x++)</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">{</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">&nbsp;&nbsp;&nbsp;scores[x]&nbsp;=&nbsp;new&nbsp;byte[4];</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">}</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">还可以有更大的数组。例如，可以有三维的矩形数组：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[,,]&nbsp;buttons&nbsp;=&nbsp;new&nbsp;int[4,5,3];</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">甚至可以将矩形数组和交错数组混合使用。例如，下面的代码声明了类型为&nbsp;<strong>int</strong>&nbsp;的二维数组的三维数组的一维数组。</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[][,,][,]&nbsp;numbers;</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">&nbsp;初始化数组</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">C#&nbsp;通过将初始值括在大括号&nbsp;({})&nbsp;内为在声明时初始化数组提供了简单而直接了当的方法。下面的示例展示初始化不同类型的数组的各种方法。</p><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\"><strong>注意&nbsp;&nbsp;&nbsp;</strong><span style=\"color: red\">如果在声明时没有初始化数组，则数组成员将自动初始化为该数组类型的默认初始值。另外，如果将数组声明为某类型的字段，则当实例化该类型时它将被设置为默认值&nbsp;null。</span></p><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">&nbsp;一维数组</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[]&nbsp;numbers&nbsp;=&nbsp;new&nbsp;int[5]&nbsp;{1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5};</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">string[]&nbsp;names&nbsp;=&nbsp;new&nbsp;string[3]&nbsp;{&quot;Matt&quot;,&nbsp;&quot;Joanne&quot;,&nbsp;&quot;Robert&quot;};</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">可省略数组的大小，如下所示：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[]&nbsp;numbers&nbsp;=&nbsp;new&nbsp;int[]&nbsp;{1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5};</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">string[]&nbsp;names&nbsp;=&nbsp;new&nbsp;string[]&nbsp;{&quot;Matt&quot;,&nbsp;&quot;Joanne&quot;,&nbsp;&quot;Robert&quot;};</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">如果提供了初始值设定项，则还可以省略&nbsp;<strong>new</strong><em>&nbsp;</em>运算符，如下所示：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[]&nbsp;numbers&nbsp;=&nbsp;{1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5};</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">string[]&nbsp;names&nbsp;=&nbsp;{&quot;Matt&quot;,&nbsp;&quot;Joanne&quot;,&nbsp;&quot;Robert&quot;};</pre><h4 style=\"font-weight: normal;margin: 10px;line-height: 1.5;padding-left: 10px;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">多维数组</h4><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[,]&nbsp;numbers&nbsp;=&nbsp;new&nbsp;int[3,&nbsp;2]&nbsp;{&nbsp;{1,&nbsp;2},&nbsp;{3,&nbsp;4},&nbsp;{5,&nbsp;6}&nbsp;};</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">string[,]&nbsp;siblings&nbsp;=&nbsp;new&nbsp;string[2,&nbsp;2]&nbsp;{&nbsp;{&quot;Mike&quot;,&quot;Amy&quot;},&nbsp;{&quot;Mary&quot;,&quot;Albert&quot;}&nbsp;};</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">可省略数组的大小，如下所示：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[,]&nbsp;numbers&nbsp;=&nbsp;new&nbsp;int[,]&nbsp;{&nbsp;{1,&nbsp;2},&nbsp;{3,&nbsp;4},&nbsp;{5,&nbsp;6}&nbsp;};</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">string[,]&nbsp;siblings&nbsp;=&nbsp;new&nbsp;string[,]&nbsp;{&nbsp;{&quot;Mike&quot;,&quot;Amy&quot;},&nbsp;{&quot;Mary&quot;,&quot;Albert&quot;}&nbsp;};</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">如果提供了初始值设定项，则还可以省略&nbsp;<strong>new</strong>&nbsp;运算符，如下所示：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[,]&nbsp;numbers&nbsp;=&nbsp;{&nbsp;{1,&nbsp;2},&nbsp;{3,&nbsp;4},&nbsp;{5,&nbsp;6}&nbsp;};</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">string[,]&nbsp;siblings&nbsp;=&nbsp;{&nbsp;{&quot;Mike&quot;,&nbsp;&quot;Amy&quot;},&nbsp;{&quot;Mary&quot;,&nbsp;&quot;Albert&quot;}&nbsp;};</pre><h4 style=\"font-weight: normal;margin: 10px;line-height: 1.5;padding-left: 10px;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">交错的数组（数组的数组）</h4><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">可以像下例所示那样初始化交错的数组：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[][]&nbsp;numbers&nbsp;=&nbsp;new&nbsp;int[2][]&nbsp;{&nbsp;new&nbsp;int[]&nbsp;{2,3,4},&nbsp;new&nbsp;int[]&nbsp;{5,6,7,8,9}&nbsp;};</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">可省略第一个数组的大小，如下所示：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[][]&nbsp;numbers&nbsp;=&nbsp;new&nbsp;int[][]&nbsp;{&nbsp;new&nbsp;int[]&nbsp;{2,3,4},&nbsp;new&nbsp;int[]&nbsp;{5,6,7,8,9}&nbsp;};</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">－或－</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[][]&nbsp;numbers&nbsp;=&nbsp;{&nbsp;new&nbsp;int[]&nbsp;{2,3,4},&nbsp;new&nbsp;int[]&nbsp;{5,6,7,8,9}&nbsp;};</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">请注意，对于交错数组的元素没有初始化语法。</p><h3 style=\"font-size: 18px;border-bottom: 1px solid rgb(170, 170, 170);line-height: 1.5;margin: 10px;padding-left: 10px;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">访问数组成员</h3><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">访问数组成员可以直接进行，类似于在&nbsp;C/C++&nbsp;中访问数组成员。例如，下面的代码创建一个名为&nbsp;<code>numbers</code>&nbsp;的数组，然后向该数组的第五个元素赋以&nbsp;5：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[]&nbsp;numbers&nbsp;=&nbsp;{10,&nbsp;9,&nbsp;8,&nbsp;7,&nbsp;6,&nbsp;5,&nbsp;4,&nbsp;3,&nbsp;2,&nbsp;1,&nbsp;0};</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">numbers[4]&nbsp;=&nbsp;5;</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">下面的代码声明一个多维数组，并向位于&nbsp;<code>[1, 1]</code>&nbsp;的成员赋以&nbsp;<code>5</code>：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[,]&nbsp;numbers&nbsp;=&nbsp;{&nbsp;{1,&nbsp;2},&nbsp;{3,&nbsp;4},&nbsp;{5,&nbsp;6},&nbsp;{7,&nbsp;8},&nbsp;{9,&nbsp;10}&nbsp;};</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">numbers[1,&nbsp;1]&nbsp;=&nbsp;5;</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">下面声明一个一维交错数组，它包含两个元素。第一个元素是两个整数的数组，第二个元素是三个整数的数组：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[][]&nbsp;numbers&nbsp;=&nbsp;new&nbsp;int[][]&nbsp;{&nbsp;new&nbsp;int[]&nbsp;{1,&nbsp;2},&nbsp;new&nbsp;int[]&nbsp;{3,&nbsp;4,&nbsp;5}</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">};</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">下面的语句向第一个数组的第一个元素赋以&nbsp;58，向第二个数组的第二个元素赋以&nbsp;667：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">numbers[0][0]&nbsp;=&nbsp;58;</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">numbers[1][1]&nbsp;=&nbsp;667;</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">数组是对象</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\"><span style=\"color: red\">在&nbsp;C#&nbsp;中，数组实际上是对象</span>。<strong>System.Array</strong>&nbsp;是所有数组类型的抽象基类型。可以使用&nbsp;<strong>System.Array</strong>&nbsp;具有的属性以及其他类成员。这种用法的一个示例是使用“长度”(Length)<strong>&nbsp;</strong>属性获取数组的长度。下面的代码将&nbsp;<code>numbers</code>&nbsp;数组的长度（为&nbsp;<code>5</code>）赋给名为&nbsp;<code>LengthOfNumbers</code>&nbsp;的变量：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[]&nbsp;numbers&nbsp;=&nbsp;{1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5};</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int&nbsp;LengthOfNumbers&nbsp;=&nbsp;numbers.Length;</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\"><strong>System.Array</strong>&nbsp;类提供许多有用的其他方法/属性，如用于排序、搜索和复制数组的方法。</p><h3 style=\"font-size: 18px;border-bottom: 1px solid rgb(170, 170, 170);line-height: 1.5;margin: 10px;padding-left: 10px;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">对数组使用&nbsp;foreach</h3><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">C#&nbsp;还提供&nbsp;<strong>foreach</strong>&nbsp;语句。该语句提供一种简单、明了的方法来循环访问数组的元素。例如，下面的代码创建一个名为&nbsp;<code>numbers</code>&nbsp;的数组，并用&nbsp;<strong>foreach</strong>&nbsp;语句循环访问该数组：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[]&nbsp;numbers&nbsp;=&nbsp;{4,&nbsp;5,&nbsp;6,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;-2,&nbsp;-1,&nbsp;0};</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">foreach&nbsp;(int&nbsp;i&nbsp;in&nbsp;numbers)</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">{</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">&nbsp;&nbsp;&nbsp;System.Console.WriteLine(i);</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">}</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">由于有了多维数组，可以使用相同方法来循环访问元素，例如：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">int[,]&nbsp;numbers&nbsp;=&nbsp;new&nbsp;int[3,&nbsp;2]&nbsp;{{9,&nbsp;99},&nbsp;{3,&nbsp;33},&nbsp;{5,&nbsp;55}};</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">foreach(int&nbsp;i&nbsp;in&nbsp;numbers)</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">{</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">&nbsp;&nbsp;&nbsp;Console.Write(&quot;{0}&nbsp;&quot;,&nbsp;i);</pre><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">}</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">该示例的输出为：</p><pre style=\"margin-top: 0px;margin-bottom: 0px;margin-left: 22px;white-space: pre-wrap;overflow-wrap: break-word;background-color: rgb(255, 255, 255)\">9&nbsp;99&nbsp;3&nbsp;33&nbsp;5&nbsp;55</pre><p style=\"margin: 10px auto;font-family: Verdana, Arial, Helvetica, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)\">不过，由于有了多维数组，使用嵌套&nbsp;<strong>for</strong>&nbsp;循环将使您可以更好地控制数组元素。</p><p><br/></p>',',C#,',0,0,'2018-07-31 05:25:04','2018-08-26 02:06:02',0,'/static/upload/blog7.jpg'),(34,7,'admin','C#链表','','<p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">C#中的链表结构在程序中十分常见，用处很广。&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>链表结构中，每个节点由值部分和指针部分组成，值部分即存储的数据，指针指向下一个节点，从而使得每个节点能够连接起来，值和指针就像骨骼和关节一样。</p><h2 id=\"一节点结构\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\" name=\"t0\"></a>一、节点结构</h2><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">自定义链表，首先定义出节点的结构，用类表示为：</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow: auto hidden; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">public&nbsp;Class&nbsp;Node&lt;T&gt;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//不确定value的值类型所以用泛型\r\npublic&nbsp;T&nbsp;value;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//值\r\npublic&nbsp;Node&lt;T&gt;&nbsp;point;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//指针\r\n}12345</pre><h2 id=\"二自定义list链表\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\" name=\"t1\"></a>二、自定义List链表</h2><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">定义完节点，下面开始构造List链表结构。自定义链表中属性有：元素个数、索引器，方法有添加、插入、遍历。其中遍历方法需要实现IEnumerable接口。</p><h3 id=\"思路\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 22px; color: rgb(79, 79, 79); line-height: 30px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\" name=\"t2\"></a>思路</h3><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">改变链表中节点的指向。</p><h4 id=\"1添加方法addt-value\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 20px; color: rgb(79, 79, 79); line-height: 28px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">1.添加方法Add(T value)</h4><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">（1）定义全局变量first和last表示链表中的根节点和最后一个节点；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（2）判断last是否为空，为空证明链表中没有元素，将需要插入的value值赋予给first，然后让last指向first；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（3）当last不为空时，新建节点node并赋予value值，用来表示插入的节点。将当前最后一个节点last指针指向node，然后node节点即成为最后一个节点&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（4）元素个数+1</p><h4 id=\"2插入方法insertt-valueint-index\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 20px; color: rgb(79, 79, 79); line-height: 28px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">2.插入方法Insert(T value,int index)</h4><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">（1）新建要插入的节点node并赋予value值；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（2）如果index=0，则需要更换根节点，让node指向first，然后重新赋予first的值为node；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（3）如果index&gt;0，则先找出index-1位置的节点temp，让node指向原来index位置的节点（temp.point），然后让temp指向node节点，这样node便成为了index处的节点。&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（4）元素个数+1</p><p><br/></p>',',C#,',0,0,'2018-07-30 08:20:08','2018-08-26 02:07:13',1,'/static/upload/blog1.jpg'),(35,7,'admin','C++二叉树','','<p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">我采用链式存储结构来表示二叉树，每一个二叉树节点包含树节点的值、树的左孩子指针、树的右孩子指针：</p><pre class=\"prettyprint\" name=\"code\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow: auto hidden; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">class&nbsp;BiNode{public:&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;data;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;BiNode&nbsp;*lchild,*rchild;\r\n};12345</pre><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">那么对于一个二叉树来说，只需要存放指向树根节点的指针即可，另外还需要声明二叉树的一些功能，比如遍历方法、求树高等（BiTree.h）：</p><pre class=\"prettyprint\" name=\"code\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow: auto hidden; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">#ifndef&nbsp;BITREE_H_INCLUDED#define&nbsp;BITREE_H_INCLUDED#include&lt;iostream&gt;#include&nbsp;&lt;string&gt;using&nbsp;namespace&nbsp;std;\r\nclass&nbsp;BiNode{public:&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;data;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;BiNode&nbsp;*lchild,*rchild;\r\n};\r\n\r\nclass&nbsp;BiTree{private:\r\n&nbsp;&nbsp;&nbsp;&nbsp;BiNode&nbsp;*&nbsp;root;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;height;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;pre_Order(BiNode&nbsp;*&nbsp;t);&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;in_Order(BiNode&nbsp;*&nbsp;t);&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;post_Order(BiNode&nbsp;*&nbsp;t);\r\n&nbsp;&nbsp;&nbsp;&nbsp;BiNode*&nbsp;create(string&nbsp;&amp;s&nbsp;,int&amp;pos);&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;get_Height(BiNode&nbsp;*t,int&nbsp;h);public:&nbsp;&nbsp;&nbsp;&nbsp;BiTree(){root=NULL;height=0;}&nbsp;&nbsp;&nbsp;&nbsp;///按照前序遍历序列创建二叉树\r\n&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;createBiTree(string&nbsp;s);&nbsp;&nbsp;&nbsp;&nbsp;///前序遍历二叉树\r\n&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;preOrder();&nbsp;&nbsp;&nbsp;&nbsp;///中序遍历二叉树\r\n&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;inOrder();&nbsp;&nbsp;&nbsp;&nbsp;///后序遍历二叉树(递归方法)\r\n&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;postOrder();&nbsp;&nbsp;&nbsp;&nbsp;///后序遍历二叉树(使用栈的非递归方法)\r\n&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;postOrder1();&nbsp;&nbsp;&nbsp;&nbsp;///层序遍历二叉树\r\n&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;levelOrder();&nbsp;&nbsp;&nbsp;&nbsp;///求树的高度\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;getHeight();&nbsp;&nbsp;&nbsp;&nbsp;///求两个节点的最大公共祖先\r\n&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;ancestor(char&nbsp;A,char&nbsp;B);\r\n};</pre><p><br/></p>',',C++,',0,0,'2018-08-26 10:10:29','2018-08-26 02:10:33',0,'/static/upload/blog2.jpg'),(36,7,'admin','C++图','','<p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">图</span>（graph）是用线连接在一起的顶点或节点的集合，即两个要素：<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">边</span>和<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">顶点</span>。每一条边连接个两个顶点，用（i，j）表示顶点为 i 和 j 的边。</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">如果用图示来表示一个图，一般用圆圈表示顶点，线段表示边。有方向的边称为<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">有向边</span>，对应的图成为<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">有向图</span>，没有方向的边称为<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">无向边</span>，对应的图叫<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">无向图</span>。对于无向图，边（i， j）和（j，i）是一样的，称顶点 i 和 j 是<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">邻接的</span>，边（i，j）<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">关联于</span>顶点 i 和 j ；对于有向图，边（i，j）表示由顶点 i 指向顶点 j 的边，即称顶点 i&nbsp;<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">邻接至</span>顶点 j ，顶点 i&nbsp;<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">邻接于</span>顶点 j ，边（i，j）<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">关联至</span>顶点 j 而<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">关联于</span>顶点 i 。</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">对于很多的实际问题，不同顶点之间的边的权值（长度、重量、成本、价值等实际意义）是不一样的，所以这样的图被称为<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">加权图</span>，反之边没有权值的图称为<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">无权图</span>。所以，图分为四种：加权有向图，加权无向图，无权有向图，无权无向图。</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"https://img-blog.csdn.net/20170723173045219?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWluZF9W/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" style=\"box-sizing: border-box; outline: 0px; margin: 24px 0px; max-width: 100%; word-break: break-all; cursor: zoom-in;\"/></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">在一个无向图中，与一个顶点相关联的边数成为该顶点的<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">度</span>。而对于有向图，则用<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">入度</span>来表示关联至该顶点的边数，<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">出度</span>来表示关联于该顶点的边数。</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">一个具有n个顶点和n(n-1)/2条边的无向图称为一个<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">完全图</span>，即每个顶点的度等于总顶点数减1。</p><h1 id=\"图的描述\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 28px; color: rgb(79, 79, 79); line-height: 36px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\" name=\"t1\"></a>图的描述</h1><h2 id=\"抽象数据类型\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\" name=\"t2\"></a>抽象数据类型</h2><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">定义抽象数据类型graph，有向图、无向图、加权图和无权图都可以根据此ADT实现。</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><pre class=\"prettyprint\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow: auto hidden; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">numberOfVerticices()：返回图的顶点数&nbsp;\r\nnumberOfEdges：返回图的边数&nbsp;\r\nexitsEdge(i,&nbsp;j)：如果边（i，j）存在，则返回true，否则返回false&nbsp;\r\ninsertEdge(theEdge)：插入边theEdge&nbsp;\r\neraseEdge(i,&nbsp;j)：删除边（i，j）&nbsp;\r\ndegree(i)：返回顶点&nbsp;i&nbsp;的度（无向图）&nbsp;\r\ninDegree(i)：返回顶点&nbsp;i&nbsp;的入度&nbsp;\r\noutDegree(i)：返回顶点&nbsp;i&nbsp;的出度&nbsp;\r\ndirected()：当且仅当有向图，返回true&nbsp;\r\nweighted()：当且仅当加权图，返回true</pre><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><h2 id=\"无权图的描述\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\" name=\"t3\"></a>无权图的描述</h2><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">对无向图的描述方法都是基于邻接的方式：邻接矩阵、邻接链表和邻接数组。</p><p><br/></p>',',C++,',0,0,'2018-08-16 02:32:41','2018-08-26 02:11:56',0,'/static/upload/blog9.jpg'),(37,7,'admin','Python二叉树','','<pre class=\"python\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; white-space: pre-wrap; overflow-wrap: break-word; font-size: 12px; background-color: rgb(255, 255, 255);\">class&nbsp;Node:\r\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;__init__(self,item):\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.item&nbsp;=&nbsp;item\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.child1&nbsp;=&nbsp;None\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.child2&nbsp;=&nbsp;Noneclass&nbsp;Tree:\r\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;__init__(self):\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.root&nbsp;=&nbsp;None\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;add(self,&nbsp;item):\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node&nbsp;=&nbsp;Node(item)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;self.root&nbsp;is&nbsp;None:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.root&nbsp;=&nbsp;node&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;[self.root]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;True:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pop_node&nbsp;=&nbsp;q.pop(0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;pop_node.child1&nbsp;is&nbsp;None:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pop_node.child1&nbsp;=&nbsp;node&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif&nbsp;pop_node.child2&nbsp;is&nbsp;None:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pop_node.child2&nbsp;=&nbsp;node&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.append(pop_node.child1)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.append(pop_node.child2)&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;traverse(self):&nbsp;&nbsp;#&nbsp;层次遍历\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;self.root&nbsp;is&nbsp;None:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;None\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;[self.root]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res&nbsp;=&nbsp;[self.root.item]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;q&nbsp;!=&nbsp;[]:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pop_node&nbsp;=&nbsp;q.pop(0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;pop_node.child1&nbsp;is&nbsp;not&nbsp;None:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.append(pop_node.child1)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.append(pop_node.child1.item)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;pop_node.child2&nbsp;is&nbsp;not&nbsp;None:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.append(pop_node.child2)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.append(pop_node.child2.item)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;res&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;preorder(self,root):&nbsp;&nbsp;#&nbsp;先序遍历\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;root&nbsp;is&nbsp;None:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;[]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;[root.item]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left_item&nbsp;=&nbsp;self.preorder(root.child1)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right_item&nbsp;=&nbsp;self.preorder(root.child2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result&nbsp;+&nbsp;left_item&nbsp;+&nbsp;right_item&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;inorder(self,root):&nbsp;&nbsp;#&nbsp;中序序遍历\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;root&nbsp;is&nbsp;None:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;[]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;[root.item]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left_item&nbsp;=&nbsp;self.inorder(root.child1)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right_item&nbsp;=&nbsp;self.inorder(root.child2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;left_item&nbsp;+&nbsp;result&nbsp;+&nbsp;right_item&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;postorder(self,root):&nbsp;&nbsp;#&nbsp;后序遍历\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;root&nbsp;is&nbsp;None:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;[]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;[root.item]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left_item&nbsp;=&nbsp;self.postorder(root.child1)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right_item&nbsp;=&nbsp;self.postorder(root.child2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;left_item&nbsp;+&nbsp;right_item&nbsp;+&nbsp;result\r\n\r\nt&nbsp;=&nbsp;Tree()for&nbsp;i&nbsp;in&nbsp;range(10):\r\n&nbsp;&nbsp;&nbsp;&nbsp;t.add(i)\r\nprint(&#39;层序遍历:&#39;,t.traverse())\r\nprint(&#39;先序遍历:&#39;,t.preorder(t.root))\r\nprint(&#39;中序遍历:&#39;,t.inorder(t.root))\r\nprint(&#39;后序遍历:&#39;,t.postorder(t.root))</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">输出结果：</strong></p><pre class=\"txt\" style=\"margin-top: 10px; margin-bottom: 10px; padding: 0px; white-space: pre-wrap; overflow-wrap: break-word; font-size: 12px; background-color: rgb(255, 255, 255);\">层次遍历:&nbsp;[0,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6,&nbsp;7,&nbsp;8,&nbsp;9]先次遍历:&nbsp;[0,&nbsp;1,&nbsp;3,&nbsp;7,&nbsp;8,&nbsp;4,&nbsp;9,&nbsp;2,&nbsp;5,&nbsp;6]中次遍历:&nbsp;[7,&nbsp;3,&nbsp;8,&nbsp;1,&nbsp;9,&nbsp;4,&nbsp;0,&nbsp;5,&nbsp;2,&nbsp;6]后次遍历:&nbsp;[7,&nbsp;8,&nbsp;3,&nbsp;9,&nbsp;4,&nbsp;1,&nbsp;5,&nbsp;6,&nbsp;2,&nbsp;0]</pre><p><br/></p>',',Python,',0,0,'2018-08-16 04:36:05','2018-08-26 02:13:00',0,'/static/upload/blog8.jpg'),(38,7,'admin','Python图','','<p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px;\">python数据结构之图的实现，官方有一篇文章介绍，http://www.python.org/doc/essays/graphs.html</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px;\">下面简要的介绍下：</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px;\">比如有这么一张图：</span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; overflow-wrap: break-word; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;-&gt;&nbsp;B\r\n&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;-&gt;&nbsp;C\r\n&nbsp;&nbsp;&nbsp;&nbsp;B&nbsp;-&gt;&nbsp;C\r\n&nbsp;&nbsp;&nbsp;&nbsp;B&nbsp;-&gt;&nbsp;D\r\n&nbsp;&nbsp;&nbsp;&nbsp;C&nbsp;-&gt;&nbsp;D\r\n&nbsp;&nbsp;&nbsp;&nbsp;D&nbsp;-&gt;&nbsp;C\r\n&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;-&gt;&nbsp;F\r\n&nbsp;&nbsp;&nbsp;&nbsp;F&nbsp;-&gt;&nbsp;C</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px;\">可以用字典和列表来构建</span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; overflow-wrap: break-word; background-color: rgb(255, 255, 255);\">&nbsp;graph&nbsp;=&nbsp;{&#39;A&#39;:&nbsp;[&#39;B&#39;,&nbsp;&#39;C&#39;],\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;B&#39;:&nbsp;[&#39;C&#39;,&nbsp;&#39;D&#39;],\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;C&#39;:&nbsp;[&#39;D&#39;],\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;D&#39;:&nbsp;[&#39;C&#39;],\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;E&#39;:&nbsp;[&#39;F&#39;],\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;F&#39;:&nbsp;[&#39;C&#39;]}</pre><p><br/></p>',',Python,',0,0,'2018-08-26 10:10:17','2018-08-26 02:13:35',0,'/static/upload/blog0.jpg'),(39,7,'admin','Go二叉树','','<p>// binary_tree 二叉树</p><p>package Algorithm</p><p><br/></p><p>import (</p><p>&nbsp; &nbsp; &quot;reflect&quot;</p><p>)</p><p><br/></p><p>// 二叉树定义</p><p>type BinaryTree struct {</p><p>&nbsp; &nbsp; Data&nbsp; &nbsp;interface{}</p><p>&nbsp; &nbsp; Lchild *BinaryTree</p><p>&nbsp; &nbsp; Rchild *BinaryTree</p><p>}</p><p><br/></p><p>// 构造方法</p><p>func NewBinaryTree(data interface{}) *BinaryTree {</p><p>&nbsp; &nbsp; return &amp;BinaryTree{Data: data}</p><p>}</p><p><br/></p><p>// 先序遍历</p><p>func (bt *BinaryTree) PreOrder() []interface{} {</p><p>&nbsp; &nbsp; t := bt</p><p>&nbsp; &nbsp; stack := NewStack(reflect.TypeOf(bt))</p><p>&nbsp; &nbsp; res := make([]interface{}, 0)</p><p>&nbsp; &nbsp; for t != nil || !stack.Empty() {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for t != nil {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res = append(res, t.Data)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; stack.Push(t)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t = t.Lchild</p><p>&nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if !stack.Empty() {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; v, _ := stack.Pop()</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t = v.(*BinaryTree)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t = t.Rchild</p><p>&nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; return res</p><p>}</p><p><br/></p><p>// 中序遍历</p><p>func (bt *BinaryTree) InOrder() []interface{} {</p><p>&nbsp; &nbsp; t := bt</p><p>&nbsp; &nbsp; stack := NewStack(reflect.TypeOf(bt))</p><p>&nbsp; &nbsp; res := make([]interface{}, 0)</p><p>&nbsp; &nbsp; for t != nil || !stack.Empty() {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for t != nil {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; stack.Push(t)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t = t.Lchild</p><p>&nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if !stack.Empty() {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; v, _ := stack.Pop()</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t = v.(*BinaryTree)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res = append(res, t.Data)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t = t.Rchild</p><p>&nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; return res</p><p>}</p><p><br/></p><p>// 后续遍历</p><p>func (bt *BinaryTree) PostOrder() []interface{} {</p><p>&nbsp; &nbsp; t := bt</p><p>&nbsp; &nbsp; stack := NewStack(reflect.TypeOf(bt))</p><p>&nbsp; &nbsp; s := NewStack(reflect.TypeOf(true))</p><p>&nbsp; &nbsp; res := make([]interface{}, 0)</p><p>&nbsp; &nbsp; for t != nil || !stack.Empty() {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for t != nil {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; stack.Push(t)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s.Push(false)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t = t.Lchild</p><p>&nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for flag, _ := s.Top(); !stack.Empty() &amp;&amp; flag.(bool); {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s.Pop()</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; v, _ := stack.Pop()</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res = append(res, v.(*BinaryTree).Data)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; flag, _ = s.Top()</p><p>&nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if !stack.Empty() {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s.Pop()</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s.Push(true)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; v, _ := stack.Top()</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t = v.(*BinaryTree)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t = t.Rchild</p><p>&nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; return res</p><p>}</p><p><br/></p>',',Go,',0,0,'2018-08-26 10:10:40','2018-08-26 02:14:58',0,'/static/upload/blog10.jpg'),(40,7,'admin','Go文件','','<p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">简单的翻看了一下Go的<code style=\"box-sizing: border-box; outline: 0px; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 2px; padding: 4px 2px 0px; word-break: break-all;\">io/ioutil</code>居然没又逐行读取的接口，在网上找到一份代码，发现其还比较使用，打算撸个例子试试看，网上的逐行读取的接口如下：</p><pre class=\"prettyprint\" name=\"code\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow: auto hidden; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">func&nbsp;ReadLine(fileName&nbsp;string,&nbsp;handler&nbsp;func(string))&nbsp;error&nbsp;{&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;f,&nbsp;err&nbsp;:=&nbsp;os.Open(fileName)&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;err&nbsp;!=&nbsp;nil&nbsp;{&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;err&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;buf&nbsp;:=&nbsp;bufio.NewReader(f)&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;{&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line,&nbsp;err&nbsp;:=&nbsp;buf.ReadString(&#39;\\n&#39;)&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line&nbsp;=&nbsp;strings.TrimSpace(line)&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler(line)&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;err&nbsp;!=&nbsp;nil&nbsp;{&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;err&nbsp;==&nbsp;io.EOF&nbsp;{&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;nil&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;err&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;nil&nbsp;&nbsp;}</pre><p><br/></p>',',Go,',1,0,'2018-08-11 10:30:46','2018-08-26 02:16:25',0,'/static/upload/blog2.jpg'),(41,7,'admin','Go指针','','<p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">Go 语言中指针是很容易学习的，Go 语言中使用指针可以更简单的执行一些任务。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">接下来让我们来一步步学习 Go 语言指针。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">我们都知道，变量是一种使用方便的占位符，用于引用计算机内存地址。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">Go 语言的取地址符是 &amp;，放到一个变量前使用就会返回相应变量的内存地址。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">以下实例演示了变量在内存中地址：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">package&nbsp;mainimport&nbsp;&quot;fmt&quot;func&nbsp;main()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;var&nbsp;a&nbsp;int&nbsp;=&nbsp;10&nbsp;&nbsp;&nbsp;\r\n\r\n&nbsp;&nbsp;&nbsp;fmt.Printf(&quot;变量的地址:&nbsp;%x\\n&quot;,&nbsp;&amp;a&nbsp;&nbsp;)}</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">执行以上代码输出结果为：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">变量的地址:&nbsp;20818a220</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">现在我们已经了解了什么是内存地址和如何去访问它。接下来我们将具体介绍指针。</p><p><br/></p>',',Go,',0,0,'2018-08-26 11:15:05','2018-08-26 02:17:23',0,'/static/upload/blog10.jpg'),(42,7,'admin','Go函数','','<p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">Go 语言中同时有函数和方法。一个方法就是一个包含了接受者的函数，接受者可以是命名类型或者结构体类型的一个值或者是一个指针。所有给定类型的方法属于该类型的方法集。语法格式如下：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">func&nbsp;(variable_name&nbsp;variable_data_type)&nbsp;function_name()&nbsp;[return_type]{\r\n&nbsp;&nbsp;&nbsp;/*&nbsp;函数体*/}</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">下面定义一个结构体类型和该类型的一个方法：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">package&nbsp;mainimport&nbsp;(\r\n&nbsp;&nbsp;&nbsp;&quot;fmt&quot;&nbsp;&nbsp;)/*&nbsp;定义结构体&nbsp;*/type&nbsp;Circle&nbsp;struct&nbsp;{\r\n&nbsp;&nbsp;radius&nbsp;float64}func&nbsp;main()&nbsp;{\r\n&nbsp;&nbsp;var&nbsp;c1&nbsp;Circle\r\n&nbsp;&nbsp;c1.radius&nbsp;=&nbsp;10.00\r\n&nbsp;&nbsp;fmt.Println(&quot;Area&nbsp;of&nbsp;Circle(c1)&nbsp;=&nbsp;&quot;,&nbsp;c1.getArea())}//该&nbsp;method&nbsp;属于&nbsp;Circle&nbsp;类型对象中的方法func&nbsp;(c&nbsp;Circle)&nbsp;getArea()&nbsp;float64&nbsp;{\r\n&nbsp;&nbsp;//c.radius&nbsp;即为&nbsp;Circle&nbsp;类型对象中的属性\r\n&nbsp;&nbsp;return&nbsp;3.14&nbsp;*&nbsp;c.radius&nbsp;*&nbsp;c.radius}</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">以上代码执行结果为：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">Area&nbsp;of&nbsp;Circle(c1)&nbsp;=&nbsp;&nbsp;314</pre><p><br/></p>',',Go,',0,0,'2018-08-26 15:35:43','2018-08-26 02:18:00',0,'/static/upload/blog7.jpg'),(43,7,'admin','Go方法','','<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; padding: 10px; margin-top: 0px; margin-bottom: 10.5px; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 0px;\">package&nbsp;main\r\n\r\nimport&nbsp;(\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;fmt&quot;\r\n)\r\n\r\ntype&nbsp;A&nbsp;struct&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;string\r\n}\r\n\r\ntype&nbsp;B&nbsp;struct&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;string\r\n}\r\n\r\nfunc&nbsp;main()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;:=&nbsp;A{}\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.Print()\r\n&nbsp;&nbsp;&nbsp;&nbsp;b&nbsp;:=&nbsp;B{}\r\n&nbsp;&nbsp;&nbsp;&nbsp;b.Print()\r\n}\r\n\r\n//编译器根据接收者的类型，来判断它是属于哪个方法\r\nfunc&nbsp;(a&nbsp;A)&nbsp;Print()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;//取一个变量a，a就是接收者，它的接收者的类型就是structA,Print就是方法的名称，参数在Print()的括号中定义\r\n&nbsp;&nbsp;&nbsp;&nbsp;//receiver就是这个函数的第一个接收者，而且是强制规定的，这个时候就变成了一个方法\r\n&nbsp;&nbsp;&nbsp;&nbsp;fmt.Println(&quot;A&quot;)\r\n}\r\nfunc&nbsp;(b&nbsp;B)&nbsp;Print()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;fmt.Println(&quot;B&quot;)\r\n}</pre><p><br/></p>',',Go,',0,0,'2018-08-26 10:15:32','2018-08-26 02:18:50',0,'/static/upload/blog1.jpg'),(44,7,'admin','Java数组','','<h1 style=\"border: 0px; margin: 0px 0px 10px; padding: 0px; font-size: 2.1em; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">Java 数组</h1><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">数组对于每一门编程语言来说都是重要的数据结构之一，当然不同语言对数组的实现及处理也不尽相同。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">Java 语言中提供的数组是用来存储固定大小的同类型元素。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">你可以声明一个数组变量，如 numbers[100] 来代替直接声明 100 个独立变量 number0，number1，....，number99。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">本教程将为大家介绍 Java 数组的声明、创建和初始化，并给出其对应的代码。</p><hr style=\"background-color: rgb(212, 212, 212); color: rgb(212, 212, 212); height: 1px; border: 0px; clear: both; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 12px; white-space: normal;\"/><h2 style=\"border: 0px; margin: 2px 0px; padding: 0px; font-size: 1.8em; line-height: 1.8em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">声明数组变量</h2><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：</p><p><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">dataType</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">arrayRefVar</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; </span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\">//</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"> 首选的方法</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"></span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">\r\n 或 \r\n</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">dataType</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">arrayRefVar</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp;</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\">//</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"> 效果相同，但不是首选方法</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"></span></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">注意:</strong>&nbsp;建议使用&nbsp;<strong style=\"border: 0px; margin: 0px; padding: 0px;\">dataType[] arrayRefVar</strong>&nbsp;的声明风格声明数组变量。 dataType arrayRefVar[] 风格是来自 C/C++ 语言 ，在Java中采用是为了让 C/C++ 程序员能够快速理解java语言。</p><h3 style=\"border: 0px; margin: 8px 0px; padding: 0px; font-size: 1.4em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">实例</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">下面是这两种语法的代码示例：</p><p><span class=\"hl-types\" style=\"border: 0px; margin: 0px; padding: 0px;\">double</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">myList</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\">//</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"> 首选的方法</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"></span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">\r\n 或 \r\n</span><span class=\"hl-types\" style=\"border: 0px; margin: 0px; padding: 0px;\">double</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">myList</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\">//</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"> &nbsp;效果相同，但不是首选方法</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"></span></p><hr style=\"background-color: rgb(212, 212, 212); color: rgb(212, 212, 212); height: 1px; border: 0px; clear: both; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 12px; white-space: normal;\"/><h2 style=\"border: 0px; margin: 2px 0px; padding: 0px; font-size: 1.8em; line-height: 1.8em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">创建数组</h2><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">Java语言使用new操作符来创建数组，语法如下：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">arrayRefVar&nbsp;=&nbsp;new&nbsp;dataType[arraySize];</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">上面的语法语句做了两件事：</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>一、使用 dataType[arraySize] 创建了一个数组。</p></li><li><p>二、把新创建的数组的引用赋值给变量 arrayRefVar。</p></li></ul><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">数组变量的声明，和创建数组可以用一条语句完成，如下所示：</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">dataType[]&nbsp;arrayRefVar&nbsp;=&nbsp;new&nbsp;dataType[arraySize];</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">另外，你还可以使用如下的方式创建数组。</p><pre class=\"prettyprint prettyprinted\" style=\"border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; margin: 15px auto; padding: 10px 15px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; white-space: pre-wrap; word-break: break-all; overflow-wrap: break-word; background-image: url(&quot;/images/codecolorer_bg.gif&quot;); background-position: center top; background-color: rgb(251, 251, 251); color: rgb(51, 51, 51);\">dataType[]&nbsp;arrayRefVar&nbsp;=&nbsp;{value0,&nbsp;value1,&nbsp;...,&nbsp;valuek};</pre><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 arrayRefVar.length-1。</p><h3 style=\"border: 0px; margin: 8px 0px; padding: 0px; font-size: 1.4em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">实例</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; line-height: 2em; overflow-wrap: break-word; word-break: break-all; font-size: 13px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">下面的语句首先声明了一个数组变量 myList，接着创建了一个包含 10 个 double 类型元素的数组，并且把它的引用赋值给 myList 变量。</p><h2 class=\"example\" style=\"border: 0px; margin: 0px 0px 2px; padding: 0px; font-size: 14.4px; line-height: 1.8em; color: rgb(97, 127, 16); background-color: transparent;\">TestArray.java 文件代码：</h2><p><span class=\"hl-reserved\" style=\"border: 0px; margin: 0px; padding: 0px; color: green;\">public</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-reserved\" style=\"border: 0px; margin: 0px; padding: 0px; color: green;\">class</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">TestArray</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">{</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">\r\n &nbsp; </span><span class=\"hl-reserved\" style=\"border: 0px; margin: 0px; padding: 0px; color: green;\">public</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-types\" style=\"border: 0px; margin: 0px; padding: 0px;\">static</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-types\" style=\"border: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">main</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">(</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">String</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">args</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">)</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">{</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">\r\n &nbsp; &nbsp; &nbsp;</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\">//</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"> 数组大小</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"></span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">\r\n &nbsp; &nbsp; &nbsp;</span><span class=\"hl-types\" style=\"border: 0px; margin: 0px; padding: 0px;\">int</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">size</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">10</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp;</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\">//</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"> 定义数组</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"></span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">\r\n &nbsp; &nbsp; &nbsp;</span><span class=\"hl-types\" style=\"border: 0px; margin: 0px; padding: 0px;\">double</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">myList</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-reserved\" style=\"border: 0px; margin: 0px; padding: 0px; color: green;\">new</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-types\" style=\"border: 0px; margin: 0px; padding: 0px;\">double</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">size</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp;</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">myList</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">0</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">5</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">.6</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp;</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">myList</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">1</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">4</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">.5</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp;</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">myList</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">2</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">3</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">.3</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp;</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">myList</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">3</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">13</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">.2</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp;</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">myList</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">4</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">4</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">.0</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp;</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">myList</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">5</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">34</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">.33</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp;</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">myList</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">6</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">34</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">.0</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp;</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">myList</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">7</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">45</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">.45</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp;</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">myList</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">8</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">99</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">.993</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp;</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">myList</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">9</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">11123</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp;</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\">//</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"> 计算所有元素的总和</span><span class=\"hl-comment\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 85, 0);\"></span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">\r\n &nbsp; &nbsp; &nbsp;</span><span class=\"hl-types\" style=\"border: 0px; margin: 0px; padding: 0px;\">double</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">total</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">0</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp;</span><span class=\"hl-reserved\" style=\"border: 0px; margin: 0px; padding: 0px; color: green;\">for</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">(</span><span class=\"hl-types\" style=\"border: 0px; margin: 0px; padding: 0px;\">int</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">i</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> = </span><span class=\"hl-number\" style=\"border: 0px; margin: 0px; padding: 0px; color: maroon;\">0</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">i</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> &lt; </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">size</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">i</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">++</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">)</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> </span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">{</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">\r\n &nbsp; &nbsp; &nbsp; &nbsp; </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">total</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> += </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">myList</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">[</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">i</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">]</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; &nbsp; &nbsp;</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">}</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">\r\n &nbsp; &nbsp; &nbsp;</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">System</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">.</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">out</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">.</span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">println</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">(</span><span class=\"hl-quotes\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(139, 0, 0);\">&quot;</span><span class=\"hl-string\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(170, 17, 17);\">总和为： </span><span class=\"hl-quotes\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(139, 0, 0);\">&quot;</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"> + </span><span class=\"hl-identifier\" style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(0, 85, 170);\">total</span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">)</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\">; &nbsp; </span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">}</span><span class=\"hl-code\" style=\"border: 0px; margin: 0px; padding: 0px; color: gray;\"></span><span class=\"hl-brackets\" style=\"border: 0px; margin: 0px; padding: 0px; color: olive;\">}</span></p><p><br/></p>',',Java,',0,0,'2018-08-16 02:32:41','2018-08-26 02:26:13',0,'/static/upload/blog8.jpg'),(45,7,'admin','Java链表','','<p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">ava单链表基本操作：&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（一）顺序查找；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（二）指定位置增加节点；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（三）删除当前节点；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（四）单链表反转；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（五）输出倒数第K个节点；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（六）删除重复节点；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（七）排序&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（八）合并两个排序单链表；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（九）交换相邻节点的值；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（十）O（n）时间内查找单链表的中间节点&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（十一）逆序（从尾至头）输出单链表&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（十二）判断单链表是否有环&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（十三）判断两个链表是否相交&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"/>（十四）已知一个单链表中存在环，求进入环中的第一个节</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">本节讲述最基础的顺序查找，主要熟悉一下单链表的属性和基本操作。</p><pre class=\"prettyprint\" name=\"code\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow: auto hidden; font-family: Consolas, Inconsolata, Courier, monospace; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none;\">/*\r\n&nbsp;*&nbsp;查找值为num的元素位置，没有返回-1*/public&nbsp;class&nbsp;SeqSearch&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;head=ListNode.getSingleList();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListNode.printList(head);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;num=9;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;id=new&nbsp;SeqSearch().searchNumId(head,num);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;要查找的元素位置为：&quot;+id);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;searchNumId(Node&nbsp;head,int&nbsp;num){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;id=1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(head!=null&amp;&amp;head.data!=num){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head=head.next;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id++;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(head==null)&nbsp;id=-1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;id;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><br/></p>',',Java,',0,0,'2018-08-02 05:25:15','2018-08-26 02:26:56',0,'/static/upload/blog6.jpg'),(46,7,'admin','Java二叉树','','<ol class=\"hljs-ln list-paddingleft-2\" style=\"list-style-type: none;\"><li><p><span class=\"hljs-class\" style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(198, 120, 221); word-break: break-all;\">class</span> <span class=\"hljs-title\" style=\"box-sizing: border-box; outline: 0px; color: rgb(230, 192, 123); word-break: break-all;\">Node</span> </span>{</p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>	<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(198, 120, 221); word-break: break-all;\">int</span> &nbsp;value;</p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>	Node leftChild;</p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>	Node rightChild;</p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>	</p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>	Node(<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(198, 120, 221); word-break: break-all;\">int</span> value) {</p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>		<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(198, 120, 221); word-break: break-all;\">this</span>.value = value;</p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>	}</p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>	</p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>	<span class=\"hljs-function\" style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(198, 120, 221); word-break: break-all;\">public</span> <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(198, 120, 221); word-break: break-all;\">void</span> <span class=\"hljs-title\" style=\"box-sizing: border-box; outline: 0px; color: rgb(97, 174, 238); word-break: break-all;\">display</span><span class=\"hljs-params\" style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">()</span> </span>{</p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>		System.out.print(<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(198, 120, 221); word-break: break-all;\">this</span>.value + <span class=\"hljs-string\" style=\"box-sizing: border-box; outline: 0px; color: rgb(152, 195, 121); word-break: break-all;\">&quot;\\t&quot;</span>);</p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>	}</p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><div class=\"hljs-ln-code\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 0px 8px; word-break: break-all; float: left; height: 22px;\"></div></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>	<span class=\"hljs-meta\" style=\"box-sizing: border-box; outline: 0px; color: rgb(97, 174, 238); word-break: break-all;\">@Override</span></p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>	<span class=\"hljs-function\" style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(198, 120, 221); word-break: break-all;\">public</span> String <span class=\"hljs-title\" style=\"box-sizing: border-box; outline: 0px; color: rgb(97, 174, 238); word-break: break-all;\">toString</span><span class=\"hljs-params\" style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">()</span> </span>{</p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>		<span class=\"hljs-comment\" style=\"box-sizing: border-box; outline: 0px; color: rgb(92, 99, 112); font-style: italic; word-break: break-all;\">// TODO Auto-generated method stub</span></p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>		<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(198, 120, 221); word-break: break-all;\">return</span> String.valueOf(value);</p></li><li><div class=\"hljs-ln-numbers\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; word-break: break-all; float: left; height: 22px; width: 24px; border-right: 1px solid rgb(197, 197, 197);\"></div><p>	}</p></li><li style=\"\"><p><br/></p></li></ol><p>}</p>',',Java,',0,0,'2018-08-25 10:25:18','2018-08-26 02:28:19',0,'/static/upload/blog1.jpg');

/*Table structure for table `tb_tag` */

DROP TABLE IF EXISTS `tb_tag`;

CREATE TABLE `tb_tag` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) NOT NULL DEFAULT '' COMMENT '标签名',
  `count` mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT '使用次数',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8;

/*Data for the table `tb_tag` */

insert  into `tb_tag`(`id`,`name`,`count`) values (1,'数组',5),(18,'Go',8),(19,'Python',4),(20,'C++',4),(21,'C#',2),(22,'Java',3);

/*Table structure for table `tb_tag_post` */

DROP TABLE IF EXISTS `tb_tag_post`;

CREATE TABLE `tb_tag_post` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `tagid` mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT '标签id',
  `postid` mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT '内容id',
  `poststatus` tinyint(3) NOT NULL DEFAULT '0' COMMENT '内容状态',
  `posttime` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '发布时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=135 DEFAULT CHARSET=utf8;

/*Data for the table `tb_tag_post` */

insert  into `tb_tag_post`(`id`,`tagid`,`postid`,`poststatus`,`posttime`) values (83,1,11,0,'2018-08-16 04:23:35'),(84,1,12,0,'2018-08-16 04:25:27'),(89,1,16,0,'2018-08-16 04:41:13'),(107,1,22,0,'2018-08-25 03:58:12'),(108,1,23,0,'2018-08-25 04:03:23'),(114,18,17,0,'2018-08-26 01:54:57'),(115,18,21,0,'2018-08-26 01:56:34'),(116,18,18,0,'2018-08-26 01:56:50'),(117,19,29,0,'2018-08-26 01:58:38'),(118,19,30,0,'2018-08-26 02:00:49'),(119,20,31,0,'2018-08-26 02:02:17'),(120,20,32,0,'2018-08-26 02:04:55'),(121,21,33,0,'2018-08-26 02:06:02'),(122,21,34,0,'2018-08-26 02:07:13'),(123,20,35,0,'2018-08-26 02:10:33'),(124,20,36,0,'2018-08-26 02:11:56'),(125,19,37,0,'2018-08-26 02:13:00'),(126,19,38,0,'2018-08-26 02:13:35'),(127,18,39,0,'2018-08-26 02:14:58'),(128,18,40,0,'2018-08-26 02:16:25'),(129,18,41,0,'2018-08-26 02:17:23'),(130,18,42,0,'2018-08-26 02:18:00'),(131,18,43,0,'2018-08-26 02:18:50'),(132,22,44,0,'2018-08-26 02:26:13'),(133,22,45,0,'2018-08-26 02:26:56'),(134,22,46,0,'2018-08-26 02:28:19');

/*Table structure for table `tb_user` */

DROP TABLE IF EXISTS `tb_user`;

CREATE TABLE `tb_user` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(15) NOT NULL DEFAULT '' COMMENT '用户名',
  `password` varchar(32) NOT NULL DEFAULT '' COMMENT '密码',
  `email` varchar(50) NOT NULL DEFAULT '' COMMENT '邮箱',
  `logincount` mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT '登录次数',
  `authkey` char(10) NOT NULL DEFAULT '' COMMENT '登录key',
  `active` tinyint(3) NOT NULL DEFAULT '0' COMMENT '是否激活',
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Data for the table `tb_user` */

insert  into `tb_user`(`id`,`username`,`password`,`email`,`logincount`,`authkey`,`active`) values (2,'root','21232f297a57a5a743894a0e4a801fc3','',1,'',1),(3,'吴俏祥','202cb962ac59075b964b07152d234b70','764217451@qq.com',1,'',1),(4,'朋也','202cb962ac59075b964b07152d234b70','764217451@qq.com',1,'',1),(7,'admin','e10adc3949ba59abbe56e057f20f883e','764217451@qq.com',27,'',1),(8,'a\'a','e10adc3949ba59abbe56e057f20f883e','764217451@qq.com',0,'',1);

